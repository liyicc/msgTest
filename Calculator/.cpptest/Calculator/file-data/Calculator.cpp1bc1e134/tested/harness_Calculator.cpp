#line 1 "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\.cpptest\\Calculator\\file-data\\Calculator.cpp1bc1e134\\bundled_Calculator.cpp"

#define CPPTEST_INSTRUMENTATION

#include "cpptest_coverage.h"
#include "cpptest_runtime_i.h"
#include "cpptest_i.h"
#include "C:\Users\ruiking\Documents\Visual Studio 2010\Projects\Calculator\.cpptest\Calculator\unit-data\current_tubf179707\cpptest_stubconfig.h"
#include "C:\Users\ruiking\Documents\Visual Studio 2010\Projects\Calculator\.cpptest\Calculator\unit-data\current_tubf179707\cpptest_stubconfig.h"


struct __CPTR_Dummy_Type {
    char nonEmpty;
};

CppTestTranslationUnitInfo __CPTR_tui_3715879958_5820_1519755920 = 
{
    0U, 
    "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\.cpptest\\Calculator\\file-data\\Calculator.cpp1bc1e134\\tested\\harness_Calculator.ildb"
};

#define __CPTR_tui &__CPTR_tui_3715879958_5820_1519755920



#include "cpptest_runtime_i.h"

#ifdef __cplusplus
extern "C" void __CPTR_Initialize(void);
extern "C" void __CPTR_Finalize(void);

struct __CPTR_Initializer_3715879958_5820_1519755920 {
    __CPTR_Initializer_3715879958_5820_1519755920()
    {
        CPPTEST_INITIALIZE_RUNTIME();
    }
    ~__CPTR_Initializer_3715879958_5820_1519755920()
    {
        CPPTEST_FINALIZE_RUNTIME();
    }
};

#if CPPTEST_USE_GLOBAL_OBJECTS_TO_INIT_RUNTIME
static struct __CPTR_Initializer_3715879958_5820_1519755920 __CPTR_initializer_3715879958_5820_1519755920;
#endif

#define CPPTEST_ENTER_MAIN_ROUTINE() __CPTR_Initializer_3715879958_5820_1519755920 __CPTR_main_initializer

#define CPPTEST_EXIT_MAIN_ROUTINE()

#else
extern void __CPTR_Initialize(void);
extern void __CPTR_Finalize(void);

#define CPPTEST_ENTER_MAIN_ROUTINE() CPPTEST_INITIALIZE_RUNTIME()

#define CPPTEST_EXIT_MAIN_ROUTINE() CPPTEST_FINALIZE_RUNTIME()

#endif



#define _coverage_data_unit_size 0
    


#define _coverage_code_size (1 + 5 / (sizeof(unsigned char) * 8))

static unsigned char _coverage_code[_coverage_code_size];



#define _coverage_func_size (1 + 5 / (sizeof(unsigned char) * 8))

static unsigned char _coverage_func_code[_coverage_func_size];

CppTestCoverageInfo __CPTR_cui_3715879958_5820_1519755920 = 
{ 
    0, 
    _coverage_data_unit_size,
    (unsigned char*)_coverage_code, 
    _coverage_code_size, 
    (unsigned char*)_coverage_func_code,
    _coverage_func_size,
    0U,
    0U,
    0U,
    0
};

#define __CPTR_cui &__CPTR_cui_3715879958_5820_1519755920
#define __CPTR_fid(ID) ID + __CPTR_cui_3715879958_5820_1519755920.funcIdOffset



#define _cpptest_strdata_var(id, bogus) _cpptest_strdata[id]
static 
const char* _cpptest_strdata[] = {
    0,
    "",
    "wmain",
    "_ZN17CalculatorProject10Calculator3addEii",
    "_ZN17CalculatorProject10Calculator5minusEii",
    "_ZN17CalculatorProject10Calculator8multiplyEii",
    "_ZN17CalculatorProject10Calculator6divideEii",
    "TestSuite_Calculator_cpp_a3ed44a1",
    "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376\\TestSuite_Calculator_cpp.cpp",
    "test_add_1",
    "test_add_10",
    "test_add_2",
    "test_add_3",
    "test_add_4",
    "test_add_5",
    "test_add_6",
    "test_add_7",
    "test_add_8",
    "test_add_9",
    "test_divide_1",
    "test_divide_10",
    "test_divide_2",
    "test_divide_3",
    "test_divide_4",
    "test_divide_5",
    "test_divide_6",
    "test_divide_7",
    "test_divide_8",
    "test_divide_9",
    "test_minus_1",
    "test_minus_10",
    "test_minus_2",
    "test_minus_3",
    "test_minus_4",
    "test_minus_5",
    "test_minus_6",
    "test_minus_7",
    "test_minus_8",
    "test_minus_9",
    "test_multiply_1",
    "test_multiply_10",
    "test_multiply_2",
    "test_multiply_3",
    "test_multiply_4",
    "test_multiply_5",
    "test_multiply_6",
    "test_multiply_7",
    "test_multiply_8",
    "test_multiply_9",
    "test_wmain_1",
    "test_wmain_10",
    "test_wmain_2",
    "test_wmain_3",
    "test_wmain_4",
    "test_wmain_5",
    "test_wmain_6",
    "test_wmain_7",
    "test_wmain_8",
    "test_wmain_9",
    0
};


#ifndef CPPTEST_IMP__ZNSt6_MutexC9ESt14_Uninitialized
#if defined(CPPTEST_UNDEFINED__ZNSt6_MutexC9ESt14_Uninitialized)
# define CPPTEST_IMP__ZNSt6_MutexC9ESt14_Uninitialized
#else
# define CPPTEST_IMP__ZNSt6_MutexC9ESt14_Uninitialized __declspec(dllimport)
#endif
#endif

#ifndef CPPTEST_IMP__ZNSt9exceptionD9Ev
#if defined(CPPTEST_UNDEFINED__ZNSt9exceptionD9Ev)
# define CPPTEST_IMP__ZNSt9exceptionD9Ev
#else
# define CPPTEST_IMP__ZNSt9exceptionD9Ev __declspec(dllimport)
#endif
#endif

#ifndef CPPTEST_IMP__ZNKSt9exception4whatEv
#if defined(CPPTEST_UNDEFINED__ZNKSt9exception4whatEv)
# define CPPTEST_IMP__ZNKSt9exception4whatEv
#else
# define CPPTEST_IMP__ZNKSt9exception4whatEv __declspec(dllimport)
#endif
#endif

#line 11 "C:\\Program Files\\Parasoft\\C++test for Visual Studio\\9.5\\engine\\runtime\\include\\cpptest_pre.h"
struct CppTest_Dummy_Type { 
char nonEmpty; 
}; 

struct CppTest_Safe_Dummy_Type { 
char nonEmpty; 
}; 

struct CppTest_Auto_Dummy_Type { 
char nonEmpty; 
}; 



typedef CppTest_Dummy_Type &CppTest_Dummy; 
static CppTest_Dummy_Type CppTest_Dummy_InstanceT; 
static CppTest_Dummy CppTest_Dummy_Instance = (CppTest_Dummy_InstanceT); 

typedef CppTest_Safe_Dummy_Type &CppTest_Safe_Dummy; 
static CppTest_Safe_Dummy_Type CppTest_Safe_Dummy_InstanceT; 
static CppTest_Safe_Dummy CppTest_Safe_Dummy_Instance = (CppTest_Safe_Dummy_InstanceT); 

typedef CppTest_Auto_Dummy_Type &CppTest_Auto_Dummy; 
static CppTest_Auto_Dummy_Type CppTest_Auto_Dummy_InstanceT; 
static CppTest_Auto_Dummy CppTest_Auto_Dummy_Instance = (CppTest_Auto_Dummy_InstanceT); 
#line 29 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\codeanalysis\\sourceannotations.h"
typedef unsigned __w64 size_t; 
#line 52
namespace vc_attributes { 



enum YesNoMaybe { 


No = 0xfff0001, 
Maybe = 0xfff0010, 
Yes = 0xfff0100
}; 

typedef YesNoMaybe YesNoMaybe; 

enum AccessType { 

NoAccess, 
Read, 
Write, 
ReadWrite
}; 

typedef AccessType AccessType; 



[repeatable, 
source_annotation_attribute ( Parameter )] 
struct PreAttribute { 


PreAttribute(); 


unsigned Deref; 
YesNoMaybe Valid; 
YesNoMaybe Null; 
YesNoMaybe Tainted; 
AccessType Access; 
size_t ValidElementsConst; 
size_t ValidBytesConst; 
const __wchar_t *ValidElements; 
const __wchar_t *ValidBytes; 
const __wchar_t *ValidElementsLength; 
const __wchar_t *ValidBytesLength; 
size_t WritableElementsConst; 
size_t WritableBytesConst; 
const __wchar_t *WritableElements; 
const __wchar_t *WritableBytes; 
const __wchar_t *WritableElementsLength; 
const __wchar_t *WritableBytesLength; 
size_t ElementSizeConst; 
const __wchar_t *ElementSize; 
YesNoMaybe NullTerminated; 
const __wchar_t *Condition; 
}; 

[repeatable, 
source_annotation_attribute ( Parameter | ReturnValue )] 
struct PostAttribute { 


PostAttribute(); 


unsigned Deref; 
YesNoMaybe Valid; 
YesNoMaybe Null; 
YesNoMaybe Tainted; 
AccessType Access; 
size_t ValidElementsConst; 
size_t ValidBytesConst; 
const __wchar_t *ValidElements; 
const __wchar_t *ValidBytes; 
const __wchar_t *ValidElementsLength; 
const __wchar_t *ValidBytesLength; 
size_t WritableElementsConst; 
size_t WritableBytesConst; 
const __wchar_t *WritableElements; 
const __wchar_t *WritableBytes; 
const __wchar_t *WritableElementsLength; 
const __wchar_t *WritableBytesLength; 
size_t ElementSizeConst; 
const __wchar_t *ElementSize; 
YesNoMaybe NullTerminated; 
YesNoMaybe MustCheck; 
const __wchar_t *Condition; 
}; 

[source_annotation_attribute ( Parameter )] 
struct FormatStringAttribute { 


FormatStringAttribute(); 


const __wchar_t *Style; 
const __wchar_t *UnformattedAlternative; 
}; 

[repeatable, 
source_annotation_attribute ( ReturnValue )] 
struct InvalidCheckAttribute { 


InvalidCheckAttribute(); 


long Value; 
}; 

[source_annotation_attribute ( Method )] 
struct SuccessAttribute { 


SuccessAttribute(); 


const __wchar_t *Condition; 
}; 

[repeatable, 
source_annotation_attribute ( Parameter )] 
struct PreBoundAttribute { 


PreBoundAttribute(); 

unsigned Deref; 
}; 

[repeatable, 
source_annotation_attribute ( Parameter | ReturnValue )] 
struct PostBoundAttribute { 


PostBoundAttribute(); 

unsigned Deref; 
}; 

[repeatable, 
source_annotation_attribute ( Parameter )] 
struct PreRangeAttribute { 


PreRangeAttribute(); 

unsigned Deref; 
const char *MinVal; 
const char *MaxVal; 
}; 

[repeatable, 
source_annotation_attribute ( Parameter | ReturnValue )] 
struct PostRangeAttribute { 


PostRangeAttribute(); 

unsigned Deref; 
const char *MinVal; 
const char *MaxVal; 
}; 




}
#line 244
typedef vc_attributes::YesNoMaybe SA_YesNoMaybe; 
const vc_attributes::YesNoMaybe SA_Yes = vc_attributes::Yes; 
const vc_attributes::YesNoMaybe SA_No = vc_attributes::No; 
const vc_attributes::YesNoMaybe SA_Maybe = vc_attributes::Maybe; 

typedef vc_attributes::AccessType SA_AccessType; 
const vc_attributes::AccessType SA_NoAccess = vc_attributes::NoAccess; 
const vc_attributes::AccessType SA_Read = vc_attributes::Read; 
const vc_attributes::AccessType SA_Write = vc_attributes::Write; 
const vc_attributes::AccessType SA_ReadWrite = vc_attributes::ReadWrite; 


typedef vc_attributes::PreAttribute SA_Pre; 
typedef vc_attributes::PostAttribute SA_Post; 
typedef vc_attributes::FormatStringAttribute SA_FormatString; 
typedef vc_attributes::InvalidCheckAttribute SA_InvalidCheck; 
typedef vc_attributes::SuccessAttribute SA_Success; 
typedef vc_attributes::PreBoundAttribute SA_PreBound; 
typedef vc_attributes::PostBoundAttribute SA_PostBound; 
typedef vc_attributes::PreRangeAttribute SA_PreRange; 
typedef vc_attributes::PostRangeAttribute SA_PostRange; 
#line 61 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#pragma pack ( push, 8 )
#line 29 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 48
extern "C" { typedef unsigned __w64 uintptr_t; }
#line 57
extern "C" { typedef char *va_list; }
#line 146
#pragma pack ( pop )
#line 409 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
extern "C" { typedef size_t rsize_t; }
#line 418
extern "C" { typedef int __w64 intptr_t; }
#line 436
extern "C" { typedef int __w64 ptrdiff_t; }
#line 447
extern "C" { typedef unsigned short wint_t; }
extern "C" { typedef unsigned short wctype_t; }
#line 469
extern "C" { typedef int errno_t; }



extern "C" { typedef long __w64 __time32_t; }




extern "C" { typedef __int64 __time64_t; }
#line 486
extern "C" { typedef __time64_t time_t; }
#line 543
extern "C" { __declspec(dllimport) void __cdecl _invalid_parameter(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); } 
#line 550
extern "C" { __declspec(dllimport) __declspec(noreturn) void __cdecl _invoke_watson(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); } 
#line 1953
struct threadlocaleinfostruct; 
struct threadmbcinfostruct; 
extern "C" { typedef threadlocaleinfostruct *pthreadlocinfo; }
extern "C" { typedef threadmbcinfostruct *pthreadmbcinfo; }
struct __lc_time_data; 
#line 1963
extern "C" { typedef 
#line 1959
struct localeinfo_struct { 

pthreadlocinfo locinfo; 
pthreadmbcinfo mbcinfo; 
} _locale_tstruct, *_locale_t; }
#line 1970
extern "C" { typedef 
#line 1966
struct tagLC_ID { 
unsigned short wLanguage; 
unsigned short wCountry; 
unsigned short wCodePage; 
} LC_ID, *LPLC_ID; }
#line 1999
extern "C" { typedef 
#line 1975
struct threadlocaleinfostruct { 
int refcount; 
unsigned lc_codepage; 
unsigned lc_collate_cp; 
unsigned long lc_handle[6]; 
LC_ID lc_id[6]; 
struct { 
char *locale; 
__wchar_t *wlocale; 
int *refcount; 
int *wrefcount; 
} lc_category[6]; 
int lc_clike; 
int mb_cur_max; 
int *lconv_intl_refcount; 
int *lconv_num_refcount; 
int *lconv_mon_refcount; 
struct lconv *lconv; 
int *ctype1_refcount; 
unsigned short *ctype1; 
const unsigned short *pctype; 
const unsigned char *pclmap; 
const unsigned char *pcumap; 
__lc_time_data *lc_time_curr; 
} threadlocinfo; }
#line 2036
#pragma pack ( pop )
#line 28 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
#pragma pack ( push, 8 )
#line 52
extern "C" { typedef int (__cdecl *_onexit_t)(void); }
#line 78
extern "C" { typedef 
#line 75
struct _div_t { 
int quot; 
int rem; 
} div_t; }




extern "C" { typedef 
#line 80
struct _ldiv_t { 
long quot; 
long rem; 
} ldiv_t; }




extern "C" { typedef 
#line 85
struct _lldiv_t { 
__int64 quot; 
__int64 rem; 
} lldiv_t; }
#line 102
#pragma pack ( 4 )


extern "C" { typedef 
#line 103
struct { 
unsigned char ld[10]; 
} _LDOUBLE; }
#pragma pack ( )
#line 124
extern "C" { typedef 
#line 122
struct { 
double x; 
} _CRT_DOUBLE; }



extern "C" { typedef 
#line 126
struct { 
float f; 
} _CRT_FLOAT; }
#line 139
extern "C" { typedef 
#line 134
struct { 



long double x; 
} _LONGDOUBLE; }



#pragma pack ( 4 )


extern "C" { typedef 
#line 144
struct { 
unsigned char ld12[12]; 
} _LDBL12; }
#pragma pack ( )
#line 163
extern "C" __declspec(dllimport) int __mb_cur_max; 




extern "C" { __declspec(dllimport) int __cdecl ___mb_cur_max_func(); } 
extern "C" { __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t); } 
#line 208
extern "C" { typedef void (__cdecl *_purecall_handler)(void); }


extern "C" { __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); } 
extern "C" { __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(); } 
#line 228
extern "C" { typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); }


extern "C" { __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); } 
extern "C" { __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); } 
#line 249
extern "C" { __declspec(dllimport) extern int *__cdecl _errno(); } 


extern "C" { errno_t __cdecl _set_errno(int _Value); } 
extern "C" { errno_t __cdecl _get_errno(int * _Value); } 


extern "C" { __declspec(dllimport) unsigned long *__cdecl __doserrno(); } 


extern "C" { errno_t __cdecl _set_doserrno(unsigned long _Value); } 
extern "C" { errno_t __cdecl _get_doserrno(unsigned long * _Value); } 


extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) char **__cdecl __sys_errlist(); } 


extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) int *__cdecl __sys_nerr(); } 




extern "C" { __declspec(dllimport) int *__cdecl __p___argc(); } 
extern "C" { __declspec(dllimport) char ***__cdecl __p___argv(); } 
extern "C" { __declspec(dllimport) __wchar_t ***__cdecl __p___wargv(); } 
extern "C" { __declspec(dllimport) char ***__cdecl __p__environ(); } 
extern "C" { __declspec(dllimport) __wchar_t ***__cdecl __p__wenviron(); } 
extern "C" { __declspec(dllimport) char **__cdecl __p__pgmptr(); } 
extern "C" { __declspec(dllimport) __wchar_t **__cdecl __p__wpgmptr(); } 
#line 283
extern "C" __declspec(dllimport) int __argc; 
extern "C" __declspec(dllimport) char **__argv; 
extern "C" __declspec(dllimport) __wchar_t **__wargv; 
#line 299
extern "C" __declspec(dllimport) char **_environ; 
extern "C" __declspec(dllimport) __wchar_t **_wenviron; 


extern "C" __declspec(deprecated("This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) char *_pgmptr; 
extern "C" __declspec(deprecated("This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) __wchar_t *_wpgmptr; 
#line 321
extern "C" { errno_t __cdecl _get_pgmptr(char ** _Value); } 
extern "C" { errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); } 



extern "C" __declspec(deprecated("This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) int _fmode; 
#line 332
extern "C" { __declspec(dllimport) errno_t __cdecl _set_fmode(int _Mode); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _get_fmode(int * _PMode); } 
#line 342
template < typename _CountofType, size_t _SizeOfArray >
char ( * __countof_helper ( _CountofType ( & _Array ) [ _SizeOfArray ] ) ) [ _SizeOfArray ];
#line 353
extern "C" { __declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code); } 
extern "C" { __declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code); } 
extern "C" { __declspec(dllimport) void __cdecl abort(); } 


extern "C" { __declspec(dllimport) unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); } 



extern "C" { int __cdecl abs(int _X); } 
extern "C" { long __cdecl labs(long _X); } 
extern "C" { __int64 __cdecl llabs(__int64 _X); } 


extern "C" { __int64 __cdecl _abs64(__int64); } 
#line 398
extern "C" { int __cdecl atexit(void (__cdecl *)(void)); } 



extern "C" { __declspec(dllimport) double __cdecl atof(const char * _String); } 
extern "C" { __declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) int __cdecl atoi(const char * _Str); } 
extern "C" { __declspec(dllimport) int __cdecl _atoi_l(const char * _Str, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) long __cdecl atol(const char * _Str); } 
extern "C" { __declspec(dllimport) long __cdecl _atol_l(const char * _Str, _locale_t _Locale); } 



extern "C" { __declspec(dllimport) void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); } 



extern "C" { __declspec(dllimport) void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); } 




extern "C" { __declspec(dllimport) void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); } 



extern "C" { __declspec(dllimport) void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); } 



extern "C" { unsigned short __cdecl _byteswap_ushort(unsigned short _Short); } 
extern "C" { unsigned long __cdecl _byteswap_ulong(unsigned long _Long); } 
extern "C" { unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Int64); } 
extern "C" { __declspec(dllimport) div_t __cdecl div(int _Numerator, int _Denominator); } 
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char *__cdecl getenv(const char * _VarName); } 

extern "C" { __declspec(dllimport) errno_t __cdecl getenv_s(size_t * _ReturnSize, char * _DstBuf, rsize_t _DstSize, const char * _VarName); } 

template < size_t _Size > inline errno_t __cdecl getenv_s ( size_t * _ReturnSize, char ( & _Dest ) [ _Size ], const char * _VarName ) throw ( ) { return getenv_s ( _ReturnSize, _Dest, _Size, _VarName ); }
#line 443
extern "C" { __declspec(dllimport) errno_t __cdecl _dupenv_s(char ** _PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName); } 
#line 449
extern "C" { __declspec(dllimport) errno_t __cdecl _itoa_s(int _Value, char * _DstBuf, size_t _Size, int _Radix); } 
template < size_t _Size > inline errno_t __cdecl _itoa_s ( int _Value, char ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _itoa_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) char *__cdecl _itoa(int _Value, char * _Dest, int _Radix); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _i64toa_s(__int64 _Val, char * _DstBuf, size_t _Size, int _Radix); } 
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char *__cdecl _i64toa(__int64 _Val, char * _DstBuf, int _Radix); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _ui64toa_s(unsigned __int64 _Val, char * _DstBuf, size_t _Size, int _Radix); } 
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) char *__cdecl _ui64toa(unsigned __int64 _Val, char * _DstBuf, int _Radix); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _atoi64(const char * _String); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); } 
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); } 
extern "C" { __declspec(dllimport) lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); } 



inline long abs(long _X) 
{ 
return labs(_X); 
} 
inline __int64 abs(__int64 _X) 
{ 
return llabs(_X); 
} 
inline ldiv_t div(long _A1, long _A2) 
{ 
return ldiv(_A1, _A2); 
} 
inline lldiv_t div(__int64 _A1, __int64 _A2) 
{ 
return lldiv(_A1, _A2); 
} 


extern "C" { __declspec(dllimport) errno_t __cdecl _ltoa_s(long _Val, char * _DstBuf, size_t _Size, int _Radix); } 
template < size_t _Size > inline errno_t __cdecl _ltoa_s ( long _Value, char ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _ltoa_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) char *__cdecl _ltoa(long _Value, char * _Dest, int _Radix); } 
extern "C" { __declspec(dllimport) int __cdecl mblen(const char * _Ch, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) size_t __cdecl _mbstrlen(const char * _Str); } 
extern "C" { __declspec(dllimport) size_t __cdecl _mbstrlen_l(const char * _Str, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) size_t __cdecl _mbstrnlen(const char * _Str, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) size_t __cdecl _mbstrnlen_l(const char * _Str, size_t _MaxCount, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); } 
extern "C" { __declspec(dllimport) int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); } 
template < size_t _Size > inline errno_t __cdecl mbstowcs_s ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], const char * _Source, size_t _MaxCount ) throw ( ) { return mbstowcs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); } 
template < size_t _Size > inline errno_t __cdecl _mbstowcs_s_l ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], const char * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _mbstowcs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) int __cdecl rand(); } 




extern "C" { __declspec(dllimport) int __cdecl _set_error_mode(int _Mode); } 

extern "C" { __declspec(dllimport) void __cdecl srand(unsigned _Seed); } 
extern "C" { __declspec(dllimport) double __cdecl strtod(const char * _Str, char ** _EndPtr); } 
extern "C" { __declspec(dllimport) double __cdecl _strtod_l(const char * _Str, char ** _EndPtr, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) long __cdecl strtol(const char * _Str, char ** _EndPtr, int _Radix); } 
extern "C" { __declspec(dllimport) long __cdecl _strtol_l(const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) unsigned long __cdecl strtoul(const char * _Str, char ** _EndPtr, int _Radix); } 
extern "C" { __declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale); } 


extern "C" { __declspec(dllimport) int __cdecl system(const char * _Command); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _ultoa_s(unsigned long _Val, char * _DstBuf, size_t _Size, int _Radix); } 
template < size_t _Size > inline errno_t __cdecl _ultoa_s ( unsigned long _Value, char ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _ultoa_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) char *__cdecl _ultoa(unsigned long _Value, char * _Dest, int _Radix); } 
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); } 
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); } 
template < size_t _Size > inline errno_t __cdecl wcstombs_s ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _MaxCount ) throw ( ) { return wcstombs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); } 
template < size_t _Size > inline errno_t __cdecl _wcstombs_s_l ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _wcstombs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); } 
#line 598
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl calloc(size_t _Count, size_t _Size); } 
extern "C" { __declspec(dllimport) __declspec(noalias) void __cdecl free(void * _Memory); } 
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl malloc(size_t _Size); } 

extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl realloc(void * _Memory, size_t _NewSize); } 

extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _recalloc(void * _Memory, size_t _Count, size_t _Size); } 
extern "C" { __declspec(dllimport) __declspec(noalias) void __cdecl _aligned_free(void * _Memory); } 
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_malloc(size_t _Size, size_t _Alignment); } 
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); } 

extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_realloc(void * _Memory, size_t _NewSize, size_t _Alignment); } 

extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_recalloc(void * _Memory, size_t _Count, size_t _Size, size_t _Alignment); } 

extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_offset_realloc(void * _Memory, size_t _NewSize, size_t _Alignment, size_t _Offset); } 

extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_offset_recalloc(void * _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); } 
extern "C" { __declspec(dllimport) size_t __cdecl _aligned_msize(void * _Memory, size_t _Alignment, size_t _Offset); } 
#line 643
extern "C" { __declspec(dllimport) errno_t __cdecl _itow_s(int _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
template < size_t _Size > inline errno_t __cdecl _itow_s ( int _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _itow_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _itow(int _Value, __wchar_t * _Dest, int _Radix); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _ltow_s(long _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
template < size_t _Size > inline errno_t __cdecl _ltow_s ( long _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _ltow_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Dest, int _Radix); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _ultow_s(unsigned long _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
template < size_t _Size > inline errno_t __cdecl _ultow_s ( unsigned long _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _ultow_s ( _Value, _Dest, _Size, _Radix ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Dest, int _Radix); } 
extern "C" { __declspec(dllimport) double __cdecl wcstod(const __wchar_t * _Str, __wchar_t ** _EndPtr); } 
extern "C" { __declspec(dllimport) double __cdecl _wcstod_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) long __cdecl wcstol(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
extern "C" { __declspec(dllimport) long __cdecl _wcstol_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) unsigned long __cdecl wcstoul(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
extern "C" { __declspec(dllimport) unsigned long __cdecl _wcstoul_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wgetenv_s(size_t * _ReturnSize, __wchar_t * _DstBuf, size_t _DstSizeInWords, const __wchar_t * _VarName); } 
template < size_t _Size > inline errno_t __cdecl _wgetenv_s ( size_t * _ReturnSize, wchar_t ( & _Dest ) [ _Size ], const wchar_t * _VarName ) throw ( ) { return _wgetenv_s ( _ReturnSize, _Dest, _Size, _VarName ); }
#line 667
extern "C" { __declspec(dllimport) errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferSizeInWords, const __wchar_t * _VarName); } 
#line 675
extern "C" { __declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); } 

extern "C" { __declspec(dllimport) double __cdecl _wtof(const __wchar_t * _Str); } 
extern "C" { __declspec(dllimport) double __cdecl _wtof_l(const __wchar_t * _Str, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _wtoi(const __wchar_t * _Str); } 
extern "C" { __declspec(dllimport) int __cdecl _wtoi_l(const __wchar_t * _Str, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) long __cdecl _wtol(const __wchar_t * _Str); } 
extern "C" { __declspec(dllimport) long __cdecl _wtol_l(const __wchar_t * _Str, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _i64tow_s(__int64 _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __wchar_t *__cdecl _i64tow(__int64 _Val, __wchar_t * _DstBuf, int _Radix); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _ui64tow_s(unsigned __int64 _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __wchar_t *__cdecl _ui64tow(unsigned __int64 _Val, __wchar_t * _DstBuf, int _Radix); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _wtoi64(const __wchar_t * _Str); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _wtoi64_l(const __wchar_t * _Str, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _wcstoi64(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _wcstoi64_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 713
extern "C" { __declspec(dllimport) char *__cdecl _fullpath(char * _FullPath, const char * _Path, size_t _SizeInBytes); } 
#line 721
extern "C" { __declspec(dllimport) errno_t __cdecl _ecvt_s(char * _DstBuf, size_t _Size, double _Val, int _NumOfDights, int * _PtDec, int * _PtSign); } 
template < size_t _Size > inline errno_t __cdecl _ecvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign ) throw ( ) { return _ecvt_s ( _Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign ); }
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) char *__cdecl _ecvt(double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _fcvt_s(char * _DstBuf, size_t _Size, double _Val, int _NumOfDec, int * _PtDec, int * _PtSign); } 
template < size_t _Size > inline errno_t __cdecl _fcvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign ) throw ( ) { return _fcvt_s ( _Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign ); }
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) char *__cdecl _fcvt(double _Val, int _NumOfDec, int * _PtDec, int * _PtSign); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _gcvt_s(char * _DstBuf, size_t _Size, double _Val, int _NumOfDigits); } 
template < size_t _Size > inline errno_t __cdecl _gcvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits ) throw ( ) { return _gcvt_s ( _Dest, _Size, _Value, _NumOfDigits ); }
extern "C" { __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) char *__cdecl _gcvt(double _Val, int _NumOfDigits, char * _DstBuf); } 

extern "C" { __declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _Str); } 
extern "C" { __declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE * _Result, char * _Str); } 
extern "C" { __declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT * _Result, char * _Str); } 
extern "C" { __declspec(dllimport) int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _Str, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _Str, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _atoflt_l(_CRT_FLOAT * _Result, char * _Str, _locale_t _Locale); } 
extern "C" { unsigned long __cdecl _lrotl(unsigned long _Val, int _Shift); } 
extern "C" { unsigned long __cdecl _lrotr(unsigned long _Val, int _Shift); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _makepath_s(char * _PathResult, size_t _SizeInWords, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); } 

template < size_t _Size > inline errno_t __cdecl _makepath_s ( char ( & _Path ) [ _Size ], const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext ) throw ( ) { return _makepath_s ( _Path, _Size, _Drive, _Dir, _Filename, _Ext ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) void __cdecl _makepath(char * _Path, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); } 
#line 769
extern "C" { _onexit_t __cdecl _onexit(_onexit_t _Func); } 




extern "C" { __declspec(dllimport) void __cdecl perror(const char * _ErrMsg); } 


/* Removed pragma: #pragma warning (push)*/
#pragma warning(disable: 6540) /* Removed pragma: #pragma warning (disable:6540)*/
extern "C" { __declspec(dllimport) int __cdecl _putenv(const char * _EnvString); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); } 
extern "C" { unsigned __cdecl _rotl(unsigned _Val, int _Shift); } 
extern "C" { unsigned __int64 __cdecl _rotl64(unsigned __int64 _Val, int _Shift); } 
extern "C" { unsigned __cdecl _rotr(unsigned _Val, int _Shift); } 
extern "C" { unsigned __int64 __cdecl _rotr64(unsigned __int64 _Val, int _Shift); } 
/* Removed pragma: #pragma warning (pop)*/

extern "C" { __declspec(dllimport) errno_t __cdecl _searchenv_s(const char * _Filename, const char * _EnvVar, char * _ResultPath, size_t _SizeInBytes); } 
template < size_t _Size > inline errno_t __cdecl _searchenv_s ( const char * _Filename, const char * _EnvVar, char ( & _ResultPath ) [ _Size ] ) throw ( ) { return _searchenv_s ( _Filename, _EnvVar, _ResultPath, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _EnvVar, char * _ResultPath); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveSize, char * _Dir, size_t _DirSize, char * _Filename, size_t _FilenameSize, char * _Ext, size_t _ExtSize); } 




template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _splitpath_s ( const char * _Dest, char ( & _Drive ) [ _DriveSize ], char ( & _Dir ) [ _DirSize ], char ( & _Name ) [ _NameSize ], char ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _splitpath_s ( _Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }

extern "C" { __declspec(dllimport) void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); } 
#line 810
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wfullpath(__wchar_t * _FullPath, const __wchar_t * _Path, size_t _SizeInWords); } 
#line 816
extern "C" { __declspec(dllimport) errno_t __cdecl _wmakepath_s(__wchar_t * _PathResult, size_t _SIZE, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); } 

template < size_t _Size > inline errno_t __cdecl _wmakepath_s ( wchar_t ( & _ResultPath ) [ _Size ], const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext ) throw ( ) { return _wmakepath_s ( _ResultPath, _Size, _Drive, _Dir, _Filename, _Ext ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath(__wchar_t * _ResultPath, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); } 


extern "C" { __declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrMsg); } 

extern "C" { __declspec(dllimport) int __cdecl _wputenv(const __wchar_t * _EnvString); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _EnvVar, __wchar_t * _ResultPath, size_t _SizeInWords); } 
template < size_t _Size > inline errno_t __cdecl _wsearchenv_s ( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t ( & _ResultPath ) [ _Size ] ) throw ( ) { return _wsearchenv_s ( _Filename, _EnvVar, _ResultPath, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _EnvVar, __wchar_t * _ResultPath); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __declspec(dllimport) void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveSize, __wchar_t * _Dir, size_t _DirSize, __wchar_t * _Filename, size_t _FilenameSize, __wchar_t * _Ext, size_t _ExtSize); } 




template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _wsplitpath_s ( const wchar_t * _Path, wchar_t ( & _Drive ) [ _DriveSize ], wchar_t ( & _Dir ) [ _DirSize ], wchar_t ( & _Name ) [ _NameSize ], wchar_t ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _wsplitpath_s ( _Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }
#line 841
extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) __declspec(dllimport) void __cdecl _seterrormode(int _Mode); } 
extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) __declspec(dllimport) void __cdecl _beep(unsigned _Frequency, unsigned _Duration); } 
extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) __declspec(dllimport) void __cdecl _sleep(unsigned long _Duration); } 
#line 862
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 4141) /* Removed pragma: #pragma warning(disable: 4141)*/
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ecvt. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) char *__cdecl ecvt(double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcvt. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) char *__cdecl fcvt(double _Val, int _NumOfDec, int * _PtDec, int * _PtSign); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _gcvt. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) char *__cdecl gcvt(double _Val, int _NumOfDigits, char * _DstBuf); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _itoa. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) char *__cdecl itoa(int _Val, char * _DstBuf, int _Radix); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ltoa. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) char *__cdecl ltoa(long _Val, char * _DstBuf, int _Radix); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putenv. See online help for details.")) __declspec(dllimport) int __cdecl putenv(const char * _EnvString); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _swab. See online help for details.")) __declspec(dllimport) void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _ultoa. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) char *__cdecl ultoa(unsigned long _Val, char * _Dstbuf, int _Radix); } 
/* Removed pragma: #pragma warning(pop)*/
extern "C" { _onexit_t __cdecl onexit(_onexit_t _Func); } 
#line 884
#pragma pack ( pop )
#line 36 "C:\\Program Files\\Parasoft\\C++test for Visual Studio\\9.5\\engine\\runtime\\include\\cpptest_common.h"
typedef 
#line 29
struct { 

char *ptr; 

size_t len; 

size_t size; 
} CppTestExpandableString; 
#line 45
typedef 
#line 38
struct CppTestListElement_s { 

char *data; 

CppTestListElement_s *next; 

CppTestListElement_s *prev; 
} CppTestListElement; 
#line 52
typedef 
#line 47
struct { 

CppTestListElement *head; 

CppTestListElement *tail; 
} CppTestList; 

typedef CppTestListElement *CppTestListIterator; 
typedef const CppTestListElement *CppTestListConstIterator; 

typedef unsigned long CppTest_ULong; 



typedef __wchar_t CppTest_wchar_t; 



extern "C" __declspec(dllimport) void __cdecl cpptestExpandableStringInit(CppTestExpandableString * es, size_t initSize); 



extern "C" __declspec(dllimport) void __cdecl cpptestExpandableStringExpand(CppTestExpandableString * es); 



extern "C" __declspec(dllimport) void __cdecl cpptestExpandableStringAppend(CppTestExpandableString * es, const char * str, size_t len); 



extern "C" __declspec(dllimport) void __cdecl cpptestExpandableStringAppendChar(CppTestExpandableString * es, char c); 



extern "C" __declspec(dllimport) void __cdecl cpptestExpandableStringDispose(CppTestExpandableString * es); 



extern "C" __declspec(dllimport) void __cdecl cpptestListInit(CppTestList * l); 


extern "C" { typedef void (__cdecl *ListElementDestructor)(char * data, void * additionalParameter); }



extern "C" __declspec(dllimport) void __cdecl cpptestListClear(CppTestList * l, ListElementDestructor destructor, void * additionalParameter); 


extern "C" __declspec(dllimport) CppTestListIterator __cdecl cpptestListRemove(CppTestList * l, CppTestListIterator it); 


extern "C" __declspec(dllimport) void __cdecl cpptestListPushFront(CppTestList * l, char * data); 


extern "C" __declspec(dllimport) char *__cdecl cpptestListFrontElement(const CppTestList * l); 


extern "C" __declspec(dllimport) void __cdecl cpptestListPushBack(CppTestList * l, char * data); 


extern "C" __declspec(dllimport) CppTestListIterator __cdecl cpptestListGetIterator(const CppTestList * l); 


extern "C" __declspec(dllimport) char *__cdecl cpptestListIteratorElement(CppTestListConstIterator it); 


extern "C" __declspec(dllimport) CppTestListIterator __cdecl cpptestListIteratorNext(CppTestListConstIterator it); 


extern "C" __declspec(dllimport) int __cdecl cpptestListIteratorEnd(CppTestListConstIterator it); 


extern "C" __declspec(dllimport) char *__cdecl cpptestStrDup(const char * str); 


extern "C" __declspec(dllimport) unsigned __cdecl cpptestStrLen(const char * str); 


extern "C" __declspec(dllimport) int __cdecl cpptestStrCmp(const char * str1, const char * str2); 


extern "C" __declspec(dllimport) int __cdecl cpptestStrNCmp(const char * str1, const char * str2, unsigned n); 


extern "C" __declspec(dllimport) int __cdecl cpptestStrCaseCmp(const char * str1, const char * str2); 


extern "C" __declspec(dllimport) int __cdecl cpptestStrNCaseCmp(const char * str1, const char * str2, unsigned n); 


extern "C" __declspec(dllimport) unsigned __cdecl cpptestCharToDigit(char c); 


extern "C" __declspec(dllimport) const char *__cdecl cpptestStrToInteger(const char * str, __int64 * integer); 


extern "C" __declspec(dllimport) const char *__cdecl cpptestStrToUInteger(const char * str, unsigned __int64 * uinteger); 


extern "C" __declspec(dllimport) const char *__cdecl cpptestStrToBool(const char * str, int * result); 


extern "C" __declspec(dllimport) char *__cdecl cpptestAllocateString(size_t size, unsigned char content); 


extern "C" __declspec(dllimport) void __cdecl cpptestIntToBitStrMask(char * bitString, unsigned value, unsigned mask); 



extern "C" __declspec(dllimport) CppTest_wchar_t *__cdecl cpptestWStrDup(const CppTest_wchar_t * str); 


extern "C" __declspec(dllimport) unsigned __cdecl cpptestWStrLen(const CppTest_wchar_t * str); 


extern "C" __declspec(dllimport) int __cdecl cpptestWStrCmp(const CppTest_wchar_t * str1, const CppTest_wchar_t * str2); 


extern "C" __declspec(dllimport) int __cdecl cpptestWStrNCmp(const CppTest_wchar_t * str1, const CppTest_wchar_t * str2, unsigned n); 


extern "C" __declspec(dllimport) unsigned __cdecl cpptestWCharToDigit(CppTest_wchar_t c); 


extern "C" __declspec(dllimport) const CppTest_wchar_t *__cdecl cpptestWStrToInteger(const CppTest_wchar_t * str, __int64 * integer); 


extern "C" __declspec(dllimport) const CppTest_wchar_t *__cdecl cpptestWStrToUInteger(const CppTest_wchar_t * str, unsigned __int64 * uinteger); 
#line 180
extern "C" __declspec(dllimport) void *__cdecl cpptestMalloc(size_t size); 


extern "C" __declspec(dllimport) void *__cdecl cpptestAlloc(size_t size); 


extern "C" __declspec(dllimport) void __cdecl cpptestFree(void * str); 


extern "C" __declspec(dllimport) void *__cdecl cpptestMemset(void * ptr, int c, size_t size); 
#line 207
typedef struct CppTestTreeNode *CppTestTree; 
#line 213
extern "C" __declspec(dllimport) void __cdecl cpptestTreeInit(CppTestTree * tree); 
#line 219
extern "C" __declspec(dllimport) void __cdecl cpptestTreeClear(CppTestTree * tree); 
#line 226
extern "C" __declspec(dllimport) int __cdecl cpptestTreeFind(CppTestTree * tree, const char * key, void ** ret); 
#line 232
extern "C" __declspec(dllimport) void __cdecl cpptestTreeAdd(CppTestTree * tree, const char * key, void * value); 

typedef void __cdecl CppTestTreeCallBackRoutine(const char * key, void * value); 
typedef CppTestTreeCallBackRoutine *CppTestTreeCallBack; 
#line 241
extern "C" __declspec(dllimport) void __cdecl cpptestTreeTraverseInorder(const CppTestTree * tree, const CppTestTreeCallBack callback); 
#line 249
extern "C" __declspec(dllimport) void __cdecl cpptestAddProperty(const char * name, const char * value); 
#line 257
extern "C" __declspec(dllimport) void __cdecl cpptestAddWeakProperty(const char * name, const char * value); 
#line 270
extern "C" __declspec(dllimport) void __cdecl cpptestParseAndAddProperties(char * properties); 
#line 276
extern "C" __declspec(dllimport) int __cdecl cpptestHasProperty(const char * name); 
#line 283
extern "C" __declspec(dllimport) const char *__cdecl cpptestGetProperty(const char * name); 
#line 290
extern "C" __declspec(dllimport) const char *__cdecl cpptestGetPropertyEx(const char * name, const char * defaultValue); 
#line 297
extern "C" __declspec(dllimport) __int64 __cdecl cpptestGetIntProperty(const char * name); 
#line 304
extern "C" __declspec(dllimport) __int64 __cdecl cpptestGetIntPropertyEx(const char * name, __int64 defaultValue); 
#line 311
extern "C" __declspec(dllimport) unsigned __int64 __cdecl cpptestGetUIntProperty(const char * name); 
#line 318
extern "C" __declspec(dllimport) unsigned __int64 __cdecl cpptestGetUIntPropertyEx(const char * name, unsigned __int64 defaultValue); 
#line 325
extern "C" __declspec(dllimport) int __cdecl cpptestGetBoolProperty(const char * name); 
#line 332
extern "C" __declspec(dllimport) int __cdecl cpptestGetBoolPropertyEx(const char * name, int defaultValue); 
#line 338
extern "C" __declspec(dllimport) const char *__cdecl cpptestPathRelativeToAbsolute(const char * relPath, const char * relToFileName); 
#line 21 "C:\\Program Files\\Parasoft\\C++test for Visual Studio\\9.5\\engine\\runtime\\include\\cpptest_system.h"
typedef 
#line 15
struct { 
void *(*mallocFunc)(size_t size); 
void *(*callocFunc)(size_t elements, size_t elem_size); 
void *(*reallocFunc)(void * ptr, size_t new_size); 
void (*freeFunc)(void * ptr); 
void *(*memsetFunc)(void * ptr, int value, size_t size); 
} CppTest_System; 
#line 37 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"
#pragma pack ( push, 8 )
#line 75
extern "C" { typedef 
#line 63
struct __JUMP_BUFFER { 
unsigned long Ebp; 
unsigned long Ebx; 
unsigned long Edi; 
unsigned long Esi; 
unsigned long Esp; 
unsigned long Eip; 
unsigned long Registration; 
unsigned long TryLevel; 
unsigned long Cookie; 
unsigned long UnwindFunc; 
unsigned long UnwindData[6]; 
} _JUMP_BUFFER; }
#line 236
extern "C" { typedef int jmp_buf[16]; }
#line 243
extern "C" { int __cdecl _setjmp(jmp_buf _Buf); } 
#line 252
extern "C" { __declspec(dllimport) __declspec(noreturn) void __cdecl longjmp(jmp_buf _Buf, int _Value) throw(...); } 





#pragma pack ( pop )
#line 187 "C:\\Program Files\\Parasoft\\C++test for Visual Studio\\9.5\\engine\\runtime\\include\\cpptest_runtime_u.h"
typedef unsigned CppTest_ErrorCode; 



typedef void (*__CPTR_TestCasePtr)(void); 


typedef void (*__CPTR_TestCaseBreakFuncPtr)(void); 

struct _CONTEXT; 
struct _EXCEPTION_RECORD; 

struct CppTest_DataSource; 
struct CppTest_DsCsvData; 
#line 216
extern "C" __declspec(dllimport) const char *__cdecl cpptestGetCurrentTestCaseName(); 
#line 222
extern "C" __declspec(dllimport) const char *__cdecl cpptestGetCurrentTestSuiteName(); 
#line 228
extern "C" __declspec(dllimport) unsigned __cdecl cpptestGetCurrentTestCaseIteration(); 
#line 242
extern "C" __declspec(dllimport) const char *__cdecl cpptestGetCurrentTestCaseFile(); 
#line 248
extern "C" __declspec(dllimport) unsigned __cdecl cpptestGetCurrentTestCaseLine(); 
#line 255
extern "C" __declspec(dllimport) void __cdecl cpptestCommunicationBegin(); 


extern "C" __declspec(dllimport) void __cdecl cpptestCommunicationEnd(); 


extern "C" __declspec(dllimport) void __cdecl cpptestTestRunnerBegin(); 


extern "C" __declspec(dllimport) void __cdecl cpptestTestRunnerEnd(); 


extern "C" __declspec(dllimport) void __cdecl cpptestTestSuiteBegin(const char * name, const char * file, unsigned line); 



extern "C" __declspec(dllimport) void __cdecl cpptestTestSuiteEnd(); 


extern "C" __declspec(dllimport) void __cdecl cpptestTestCaseBegin(const char * name, CppTest_ErrorCode expectedErrorCode, unsigned expectedErrorCodeMask, int isCpp, const char * file, unsigned line); 




extern "C" __declspec(dllimport) void __cdecl cpptestTestCaseEnd(); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsForCurrentTestCaseInitialized(CppTest_DataSource * dataSource); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsTestCaseBegin(const char * name, CppTest_ErrorCode expectedErrorCode, unsigned expectedErrorCodeMask, int isCpp, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsTestCaseEnd(); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsTestCaseIterationBegin(unsigned iteration, const char * signature); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsTestCaseIterationEnd(); 




extern "C" __declspec(dllimport) void CppTest_DsFinalize(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) void CppTest_DsDumpInt(CppTestExpandableString * es, int i); 


extern "C" __declspec(dllimport) const char *CppTest_DsGetMemBuffer(CppTest_DataSource * ds, const char * name, unsigned * size); 


extern "C" __declspec(dllimport) __int64 CppTest_DsGetInteger(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) unsigned __int64 CppTest_DsGetUInteger(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) double CppTest_DsGetFloat(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) int CppTest_DsGetBool(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) char CppTest_DsGetChar(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) int CppTest_DsErrorHasMoreData(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) const char *CppTest_DsErrorGetDataSignature(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) unsigned CppTest_DsErrorGetIteration(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) int CppTest_DsRepeatLoadNextData(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) unsigned CppTest_DsRepeatGetIteration(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) int CppTest_DsRepeatHasMoreData(CppTest_DataSource * ds); 
#line 348
extern "C" __declspec(dllimport) void CppTest_DsRepeatFinalize(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) CppTest_DataSource *__cdecl CppTest_DsRepeat(int count); 


extern "C" __declspec(dllimport) int CppTest_DsArrayLoadNextData(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) unsigned CppTest_DsArrayGetIteration(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) int CppTest_DsArrayHasMoreData(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) int CppTest_DsArrayGetColumn(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) int CppTest_DsArrayHasColumn(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) const char *CppTest_DsArrayGetCStr(CppTest_DataSource * ds, const char * name); 



extern "C" __declspec(dllimport) const CppTest_wchar_t *CppTest_DsArrayGetWCStr(CppTest_DataSource * ds, const char * name); 
#line 382
extern "C" __declspec(dllimport) void CppTest_DsArrayFinalize(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) CppTest_DataSource *__cdecl CppTest_DsArray(const char ** data, int rows, int columns); 




extern "C" __declspec(dllimport) int CppTest_DsCsvPeekChar(CppTest_DsCsvData * dsCsv); 


extern "C" __declspec(dllimport) int CppTest_DsCsvReadChar(CppTest_DsCsvData * dsCsv); 


extern "C" __declspec(dllimport) void CppTest_DsCsvGetSkipWS(CppTest_DsCsvData * dsCsv); 


extern "C" __declspec(dllimport) int CppTest_DsCsvIsEndOfField(CppTest_DsCsvData * dsCsv, int * pC); 


extern "C" __declspec(dllimport) int CppTest_DsCsvLoadQuotedField(CppTest_DsCsvData * dsCsv, CppTestExpandableString * pEs, int * pC); 


extern "C" __declspec(dllimport) int CppTest_DsCsvLoadField(CppTest_DsCsvData * dsCsv, CppTestExpandableString * pEs, int * pC); 
#line 413
extern "C" __declspec(dllimport) int CppTest_DsCsvLoadNextData(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) unsigned CppTest_DsCsvGetIteration(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) int CppTest_DsCsvHasMoreData(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) CppTestListIterator CppTest_DsCsvGetColumn(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) int CppTest_DsCsvHasColumn(CppTest_DataSource * ds, const char * name); 


extern "C" __declspec(dllimport) const char *CppTest_DsCsvGetCStr(CppTest_DataSource * ds, const char * name); 



extern "C" __declspec(dllimport) const CppTest_wchar_t *CppTest_DsCsvGetWCStr(CppTest_DataSource * ds, const char * name); 
#line 441
extern "C" __declspec(dllimport) void CppTest_DsCsvFinalize(CppTest_DataSource * ds); 


extern "C" __declspec(dllimport) CppTest_DataSource *__cdecl CppTest_DsCsv(const char * fileName, char separator, int useCollumns, int trimValues); 
#line 450
extern "C" __declspec(dllimport) CppTest_DataSource *__cdecl CppTest_Ds(const char * dataSourceName); 
#line 467
extern "C" __declspec(dllimport) const char *__cdecl cpptestFormatBuffer(char * buffer, const char * format, ...); 
#line 476
extern "C" __declspec(dllimport) int __cdecl cpptestCharPtrsEqual(const char * expected, const char * actual); 
#line 487
extern "C" __declspec(dllimport) int cpptestWCharPtrsEqual(const void * expected, const void * actual); 



extern "C" __declspec(dllimport) int cpptestWCharPtrsNEqual(const void * expected, const void * actual, unsigned maxSize); 




extern "C" __declspec(dllimport) void __cdecl cpptestUnhandledStructuredExceptionInThread(unsigned code); 

extern "C" __declspec(dllimport) int __cdecl cpptestUnhandledStructuredExceptionInTestCase(unsigned code); 

extern "C" __declspec(dllimport) void __cdecl cpptestUnhandledCppExceptionInThread(); 

extern "C" __declspec(dllimport) void __cdecl cpptestNoExpectedCppExceptionInTestCase(const char * e); 

extern "C" __declspec(dllimport) void __cdecl cpptestUnhandledStdExceptionInTestCase(const char * what); 

extern "C" __declspec(dllimport) void __cdecl cpptestUnhandledCppExceptionInTestCase(); 
#line 514
extern "C" __declspec(dllimport) void __cdecl cpptestSignalFound(int sigNo); 


extern "C" __declspec(dllimport) __CPTR_TestCaseBreakFuncPtr __cdecl cpptestGetTestCaseBreakFuncPtr(); 


extern "C" __declspec(dllimport) __CPTR_TestCaseBreakFuncPtr __cdecl cpptestSetTestCaseBreakFuncPtr(__CPTR_TestCaseBreakFuncPtr funcpPtr); 
#line 537
extern "C" __declspec(dllimport) char __cdecl cpptestLimitsGetMaxChar(); 
#line 543
extern "C" __declspec(dllimport) char __cdecl cpptestLimitsGetMinChar(); 
#line 549
extern "C" __declspec(dllimport) signed char __cdecl cpptestLimitsGetMaxSignedChar(); 
#line 555
extern "C" __declspec(dllimport) signed char __cdecl cpptestLimitsGetMinSignedChar(); 
#line 561
extern "C" __declspec(dllimport) unsigned char __cdecl cpptestLimitsGetMaxUnsignedChar(); 
#line 568
extern "C" __declspec(dllimport) short __cdecl cpptestLimitsGetMaxShort(); 
#line 574
extern "C" __declspec(dllimport) short __cdecl cpptestLimitsGetMinShort(); 
#line 580
extern "C" __declspec(dllimport) unsigned short __cdecl cpptestLimitsGetMaxUnsignedShort(); 
#line 587
extern "C" __declspec(dllimport) int __cdecl cpptestLimitsGetMaxInt(); 
#line 593
extern "C" __declspec(dllimport) int __cdecl cpptestLimitsGetMinInt(); 
#line 599
extern "C" __declspec(dllimport) unsigned __cdecl cpptestLimitsGetMaxUnsignedInt(); 
#line 606
extern "C" __declspec(dllimport) long __cdecl cpptestLimitsGetMaxLong(); 
#line 612
extern "C" __declspec(dllimport) long __cdecl cpptestLimitsGetMinLong(); 
#line 618
extern "C" __declspec(dllimport) unsigned long __cdecl cpptestLimitsGetMaxUnsignedLong(); 
#line 625
extern "C" __declspec(dllimport) float __cdecl cpptestLimitsGetMaxPosFloat(); 
#line 631
extern "C" __declspec(dllimport) float __cdecl cpptestLimitsGetMinNegFloat(); 
#line 637
extern "C" __declspec(dllimport) float __cdecl cpptestLimitsGetMaxNegFloat(); 
#line 643
extern "C" __declspec(dllimport) float __cdecl cpptestLimitsGetMinPosFloat(); 
#line 650
extern "C" __declspec(dllimport) double __cdecl cpptestLimitsGetMaxPosDouble(); 
#line 656
extern "C" __declspec(dllimport) double __cdecl cpptestLimitsGetMinNegDouble(); 
#line 662
extern "C" __declspec(dllimport) double __cdecl cpptestLimitsGetMaxNegDouble(); 
#line 668
extern "C" __declspec(dllimport) double __cdecl cpptestLimitsGetMinPosDouble(); 
#line 675
extern "C" __declspec(dllimport) long double __cdecl cpptestLimitsGetMaxPosLongDouble(); 
#line 681
extern "C" __declspec(dllimport) long double __cdecl cpptestLimitsGetMinNegLongDouble(); 
#line 687
extern "C" __declspec(dllimport) long double __cdecl cpptestLimitsGetMaxNegLongDouble(); 
#line 693
extern "C" __declspec(dllimport) long double __cdecl cpptestLimitsGetMinPosLongDouble(); 
#line 710
extern "C" __declspec(dllimport) int __cdecl CppTest_IsCurrentTestCase(const char * id); 
#line 716
extern "C" __declspec(dllimport) const char *__cdecl CppTest_GetCurrentTestCaseName(); 
#line 722
extern "C" __declspec(dllimport) const char *__cdecl CppTest_GetCurrentTestSuiteName(); 
#line 730
extern "C" __declspec(dllimport) const char *__cdecl CppTest_Format(const char * format, ...); 
#line 736
typedef struct CppTest_StreamRedirectStruct CppTest_StreamRedirect; 
typedef void (*CppTest_ClearFlush)(void); 
typedef int (*CppTest_StreamDup)(long, int); 
#line 745
void CppTest_flushStdOutput(); 
#line 753
void CppTest_flushStdError(); 
#line 760
void CppTest_clearStdInput(); 

int CppTest_streamDup(long, int); 
#line 829
extern "C" __declspec(dllimport) CppTest_StreamRedirect *__cdecl CppTest_StreamRedirectInput(int fd, const char * value, CppTest_ClearFlush ptr, CppTest_StreamDup ptr1); 
#line 844
extern "C" __declspec(dllimport) CppTest_StreamRedirect *__cdecl CppTest_StreamRedirectNInput(int fd, const char * value, unsigned size, CppTest_ClearFlush ptr, CppTest_StreamDup ptr1); 
#line 856
extern "C" __declspec(dllimport) CppTest_StreamRedirect *__cdecl CppTest_StreamRedirectOutput(int fd, CppTest_ClearFlush ptr); 
#line 871
extern "C" __declspec(dllimport) int __cdecl CppTest_StreamCompare(CppTest_StreamRedirect * redirect, const char * value); 
#line 889
extern "C" __declspec(dllimport) int __cdecl CppTest_StreamNCompare(CppTest_StreamRedirect * redirect, const char * value, unsigned size); 
#line 902
extern "C" __declspec(dllimport) int __cdecl CppTest_StreamSearch(CppTest_StreamRedirect * redirect, const char * pattern); 
#line 915
extern "C" __declspec(dllimport) int __cdecl CppTest_StreamNSearch(CppTest_StreamRedirect * redirect, const char * pattern, unsigned size); 
#line 929
extern "C" __declspec(dllimport) char *__cdecl CppTest_StreamReadData(CppTest_StreamRedirect * redirect, unsigned * len); 
#line 939
extern "C" __declspec(dllimport) void __cdecl CppTest_StreamReset(CppTest_StreamRedirect * redirect); 
#line 947
extern "C" __declspec(dllimport) void __cdecl CppTest_ClearRedirects(); 
#line 956
extern "C" __declspec(dllimport) CppTest_DataSource *__cdecl cpptestGetCurrentDataSource(); 
#line 962
extern "C" __declspec(dllimport) void __cdecl cpptestIgnoreCurrStackElement(); 


typedef void (*CppTestThreadInitCallback)(void); 




extern "C" __declspec(dllimport) void __cdecl cpptestSetThreadInitCallback(CppTestThreadInitCallback callback); 


typedef void (*CppTestPropertiesInitCallback)(void); 




extern "C" __declspec(dllimport) void __cdecl cpptestSetPropertiesInitCallback(CppTestPropertiesInitCallback callback); 
#line 984
extern "C" __declspec(dllimport) void __cdecl cpptestInitializeRuntime(CppTestPropertiesInitCallback propInitCallback, CppTestThreadInitCallback threadInitCallback, CppTest_System * system); 
#line 993
extern "C" __declspec(dllimport) void __cdecl cpptestFinalizeRuntime(); 
#line 999
typedef 
#line 996
struct { 
long seconds; 
long nanoseconds; 
} CppTest_Time; 
#line 1005
extern "C" __declspec(dllimport) void __cdecl cpptestCheckMemoryLeaks(const char * file, unsigned line, int isAssert); 
#line 1013
extern "C" __declspec(dllimport) CppTest_Time __cdecl CppTest_TimeInit(long seconds, long nanoseconds); 
#line 1020
extern "C" __declspec(dllimport) CppTest_Time __cdecl CppTest_TimeCurrent(); 




extern "C" __declspec(dllimport) CppTest_Time __cdecl CppTest_TimeDiff(CppTest_Time t1, CppTest_Time t2); 
#line 1034
extern "C" __declspec(dllimport) int __cdecl CppTest_TimeCompare(CppTest_Time t1, CppTest_Time t2); 
#line 1040
extern "C" const char *__cdecl CppTestCallProgramWrapper(const char * program, int * pResult, const char * param1, const char * param2, const char * param3); 
#line 1047
extern "C" __declspec(dllimport) void __cdecl cpptestUnhandledExceptionTerminate(); 
#line 1054
extern "C" __declspec(dllimport) void __cdecl cpptestAssertException(const char * file, unsigned line, const char * message, const char * arg1, const char * arg2, const char * arg3, const char * arg4, int kind); 


extern "C" void CppTest_InitializeRuntime(); 

extern "C" void CppTest_FinalizeRuntime(); 

extern "C" __declspec(dllimport) char **__cdecl CppTest_CmdLineToArgv(const char * cmdLine, int * argc); 

extern "C" __declspec(dllimport) void __cdecl CppTest_FreeArgv(int argc, char * argv[]); 



extern "C" __declspec(dllimport) CppTest_wchar_t **__cdecl CppTest_CmdLineToArgvW(const CppTest_wchar_t * cmdLine, int * argc); 

extern "C" __declspec(dllimport) void __cdecl CppTest_FreeArgvW(int argc, CppTest_wchar_t * argv[]); 



extern int CppTest_Main(int argc, char * argv[]); 



extern int CppTest_MainW(int argc, CppTest_wchar_t * argv[]); 



extern "C" __declspec(dllimport) const char *__cdecl cpptestStringPool(int id, const char * str); 

int __cdecl CppTest_IsCurrentContext(const char * context); 
#line 1095
extern "C" __declspec(dllimport) void *__cdecl cpptestDsMalloc(size_t size); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsFree(void * str); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsCsvError(CppTest_ErrorCode errorCode, const char * err, const char * file, unsigned line, unsigned column); 



extern "C" __declspec(dllimport) void __cdecl cpptestDsCsvErrorOpeningFile(const char * err, const char * file); 


extern "C" __declspec(dllimport) void __cdecl cpptestNoDsError(const char * dataSourceName); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsErrorInValue(const char * value); 


extern "C" __declspec(dllimport) void __cdecl cpptestDsUnknownValue(const char * name); 


extern "C" __declspec(dllimport) int __cdecl cpptestDsNotInitialized(); 


extern "C" __declspec(dllimport) int __cdecl cpptestDsMethodNotInitialized(const char * method); 


extern "C" __declspec(dllimport) void __cdecl cpptestAssertCall(const char * message, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestExitCall(int exitCode); 


extern "C" __declspec(dllimport) void __cdecl cpptestAbortCall(); 


extern "C" __declspec(dllimport) void __cdecl cpptestRiseCall(int exitCode); 



extern "C" __declspec(dllimport) void __cdecl cpptestInvalidParamCalled(const CppTest_wchar_t * expression, const CppTest_wchar_t * function, const CppTest_wchar_t * file, unsigned line); 




extern "C" __declspec(dllimport) void __cdecl cpptestTooLargeStackTrace(unsigned maxAllowedStackTraceDepth); 



extern "C" __declspec(dllimport) void __cdecl cpptestTestCaseNotValidated(const char * file, unsigned line); 



extern "C" __declspec(dllimport) void __cdecl cpptestReport(const char * txt, const char * file, unsigned line, int reportStackTrace); 


extern "C" __declspec(dllimport) void __cdecl cpptestReportBool(const char * txt, int value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestReportInteger(const char * txt, __int64 value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestReportUInteger(const char * txt, unsigned __int64 value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestReportFloat(const char * txt, double value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestReportCStr(const char * txt, const char * value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestReportCStrN(const char * txt, const char * value, unsigned maxSize, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestReportMemBuffer(const char * txt, const void * value, unsigned size, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestReportPtr(const char * txt, int isNull, const char * file, unsigned line); 



extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionBool(const char * valueString, int value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionInteger(const char * valueString, __int64 value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionUInteger(const char * valueString, unsigned __int64 value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionFloat(const char * valueString, double value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionCStr(const char * valueString, const char * value, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionCStrN(const char * valueString, const char * value, unsigned maxSize, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionMemBuffer(const char * valueString, const void * value, unsigned size, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionPtr(const char * valueString, int isNull, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestPostConditionExternal(const char * userMessage, const char * ret, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestExternalProcessError(CppTest_ErrorCode errorCode, const char * err); 


extern "C" __declspec(dllimport) void __cdecl cpptestExternalProcessErrorFull(CppTest_ErrorCode errorCode, const char * err, const char * program, const char * param1, const char * param2, const char * param3); 
#line 1213
extern "C" __declspec(dllimport) int __cdecl cpptestAssertion(int value, const char * userMessage, const char * conditionStr, const char * file, unsigned line); 


extern "C" __declspec(dllimport) int __cdecl cpptestBitAssertion(int value, unsigned mask, unsigned expected, unsigned actual, const char * userMessage, const char * actualStr, const char * file, unsigned line); 



extern "C" __declspec(dllimport) int __cdecl cpptestEqualAssertion(int value, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 



extern "C" __declspec(dllimport) int __cdecl cpptestBoolEqualAssertion(int value, int expected, int actual, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 



extern "C" __declspec(dllimport) int __cdecl cpptestIntegerEqualAssertion(int value, __int64 expected, __int64 actual, int hasDelta, __int64 delta, unsigned * arrayIndex, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 




extern "C" __declspec(dllimport) int __cdecl cpptestUIntegerEqualAssertion(int value, unsigned __int64 expected, unsigned __int64 actual, int hasDelta, unsigned __int64 delta, unsigned * arrayIndex, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 




extern "C" __declspec(dllimport) int __cdecl cpptestFloatEqualAssertion(int value, double expected, double actual, int hasDelta, double delta, unsigned * arrayIndex, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 




extern "C" __declspec(dllimport) int __cdecl cpptestFloatFmtEqualAssertion(int value, double actual, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 



extern "C" __declspec(dllimport) int __cdecl cpptestCstrEqualAssertion(int value, const char * expected, const char * actual, unsigned * arrayIndex, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 



extern "C" __declspec(dllimport) int __cdecl cpptestCstrNEqualAssertion(int value, const char * expected, const char * actual, unsigned maxSize, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 



extern "C" __declspec(dllimport) int __cdecl cpptestMemBufferEqualAssertion(int value, const void * expected, const void * actual, unsigned size, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 




extern "C" __declspec(dllimport) int __cdecl cpptestPtrEqualAssertion(int value, const void * expected, const void * actual, unsigned * arrayIndex, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 
#line 1266
extern "C" __declspec(dllimport) int __cdecl cpptestWCstrEqualAssertion(int value, const CppTest_wchar_t * expected, const CppTest_wchar_t * actual, unsigned * arrayIndex, const char * userMessage, const char * expectedStr, const char * actualStr, const char * file, unsigned line); 
#line 1272
extern "C" __declspec(dllimport) void __cdecl cpptestThrowAssertion(int value, const char * userMessage, const char * exceptionTypeStr, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestNoThrowAssertion(int value, const char * userMessage, const char * file, unsigned line); 


extern "C" __declspec(dllimport) void __cdecl cpptestNoExpectedExceptionInTestCase(const char * e); 


extern "C" __declspec(dllimport) void __cdecl cpptestStdExceptionInTestCase(const char * what); 


extern "C" __declspec(dllimport) void __cdecl cpptestExceptionInTestCase(); 


extern "C" __declspec(dllimport) void __cdecl cpptestTestCaseDisabled(const char * name, const char * file, unsigned line); 



extern "C" __declspec(dllimport) int __cdecl cpptestCharPtrsNEqual(const char * expected, const char * actual, unsigned maxSize); 


extern "C" __declspec(dllimport) int __cdecl cpptestMemBuffersEqual(const void * expected, const void * actual, unsigned size); 


extern "C" __declspec(dllimport) int __cdecl cpptestFloatsFmtEqual(const char * expected, double actual); 


extern "C" __declspec(dllimport) void __cdecl cpptestTimeout(unsigned long timeout); 


extern "C" __declspec(dllimport) void __cdecl cpptestUserBreak(const char * file, unsigned line); 




extern "C" __declspec(dllimport) jmp_buf *__cdecl cpptestGetJmpBuf(); 


extern "C" __declspec(dllimport) void __cdecl cpptestSetJmpCalled(int jmpCalled); 


extern "C" __declspec(dllimport) int __cdecl cpptestGetJmpCalled(); 


extern "C" __declspec(dllimport) int __cdecl cpptestSetJmpReturn(int jmpReturn); 


extern "C" __declspec(dllimport) int __cdecl cpptestGetJmpReturn(); 



extern "C" void __cdecl cpptestTestCaseSlave(__CPTR_TestCasePtr tc); 
#line 41 "C:\\Program Files\\Parasoft\\C++test for Visual Studio\\9.5\\engine\\runtime\\include\\cpptest_data_source.h"
extern "C" { typedef 
#line 16
struct CppTest_DataSource { 

const char *(*getMemBuffer)(CppTest_DataSource *, const char * name, unsigned * size); 
const char *(*getCStr)(CppTest_DataSource *, const char * name); 

const CppTest_wchar_t *(*getWCStr)(CppTest_DataSource *, const char * name); 

__int64 (*getInteger)(CppTest_DataSource *, const char * name); 
unsigned __int64 (*getUInteger)(CppTest_DataSource *, const char * name); 
double (*getFloat)(CppTest_DataSource *, const char * name); 
int (*getBool)(CppTest_DataSource *, const char * name); 
char (*getChar)(CppTest_DataSource *, const char * name); 

int (*hasColumn)(CppTest_DataSource *, const char * name); 

int (*loadNextData)(CppTest_DataSource *); 
int (*hasMoreData)(CppTest_DataSource *); 
unsigned (*getIteration)(CppTest_DataSource *); 




void (*finalize)(CppTest_DataSource *); 

void *data; 
} CppTest_DataSource; }

extern "C" { typedef CppTest_DataSource *(*CppTest_GetDataSourceFPtr)(const char * dataSource, const char * testSuite); }
#line 52
extern "C" CppTest_DataSource *__cdecl CppTest_DsArray(const char ** data, int rows, int columns); 
extern "C" CppTest_DataSource *__cdecl CppTest_DsRepeat(int count); 
extern "C" CppTest_DataSource *__cdecl CppTest_Ds(const char * dataSourceName); 


extern "C" CppTest_DataSource *__cdecl CppTest_DsCsv(const char * fileName, char separator, int useCollumns, int trimValues); 
#line 194 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1600")
#line 203
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 27 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"
#ifndef __CPTR_NO_PRAGMA_1499154335_0_27
#pragma comment(lib, "msvcprtd")
#endif
#line 8 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#pragma pack ( push, 8 )
#line 535
namespace std { 
typedef bool _Bool; 
}
#line 553
typedef __int64 _Longlong; 
typedef unsigned __int64 _ULonglong; 
#line 576
typedef unsigned short char16_t; 
typedef unsigned char32_t; 
#line 591
namespace std { 
enum _Uninitialized { 

_Noinit
}; 



/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 4412) /* Removed pragma: #pragma warning(disable:4412)*/
class __declspec(dllimport) _Lockit { 
#line 624
public: __thiscall _Lockit(); 
explicit __thiscall _Lockit(int); 
__thiscall ~_Lockit(); 


static void __cdecl _Lockit_ctor(int); 
static void __cdecl _Lockit_dtor(int); 


private: static void __cdecl _Lockit_ctor(_Lockit *); 
static void __cdecl _Lockit_ctor(_Lockit *, int); 
static void __cdecl _Lockit_dtor(_Lockit *); 

_Lockit(const _Lockit &); 
_Lockit &operator=(const _Lockit &); 

int _Locktype; 
#line 655
}; 
#line 742
class _Mutex { 
#line 773
public: CPPTEST_IMP__ZNSt6_MutexC9ESt14_Uninitialized inline __thiscall _Mutex(_Uninitialized) 
{ 
} 

__thiscall _Mutex(); 
__thiscall ~_Mutex(); 
void __thiscall _Lock(); 
void __thiscall _Unlock(); 



private: static void __cdecl _Mutex_ctor(_Mutex *); 
static void __cdecl _Mutex_dtor(_Mutex *); 
static void __cdecl _Mutex_Lock(_Mutex *); 
static void __cdecl _Mutex_Unlock(_Mutex *); 

_Mutex(const _Mutex &); 
_Mutex &operator=(const _Mutex &); 
void *_Mtx; 
#line 802
}; 

class __declspec(dllimport) _Init_locks { 
#line 820
public: __thiscall _Init_locks(); 
__thiscall ~_Init_locks(); 



private: static void __cdecl _Init_locks_ctor(_Init_locks *); 
static void __cdecl _Init_locks_dtor(_Init_locks *); 
#line 837
}; 

/* Removed pragma: #pragma warning(pop)*/
}
#line 849
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void)); 

typedef int _Mbstatet; 
typedef unsigned long _Uint32t; 
#line 860
#pragma pack ( pop )
#line 38 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"
namespace std { typedef decltype((__nullptr)) nullptr_t; }
using std::nullptr_t;
#line 73
extern "C" { __declspec(dllimport) extern unsigned long __cdecl __threadid(); } 

extern "C" { __declspec(dllimport) extern uintptr_t __cdecl __threadhandle(); } 
#line 17 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"
namespace std { 
using ::ptrdiff_t;using ::size_t;
}
#line 17 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"
/* Removed pragma: #pragma warning(push,3)*/
#line 16
#pragma pack ( push, 8 )


namespace std { 
#line 78
template < bool _Test,
 class _Ty1,
 class _Ty2 >
 class _If{ 


public: typedef _Ty2 _Type; 
};

template < class _Ty1,
 class _Ty2 >
 class _If < true, _Ty1, _Ty2 >{ 


public: typedef _Ty1 _Type; 
};




namespace tr1 { 
typedef char (&_No)[1]; 
typedef char (&_Yes)[2]; 
}
#line 108
struct _Bool_struct { 

int _Member; 
}; 
#line 125
typedef int _Bool_struct::*_Bool_type; 
#line 132
template < class _Arg,
 class _Result >
 struct unary_function{ 

typedef _Arg argument_type; 
typedef _Result result_type; 
};


template < class _Arg1,
 class _Arg2,
 class _Result >
 struct binary_function{ 

typedef _Arg1 first_argument_type; 
typedef _Arg2 second_argument_type; 
typedef _Result result_type; 
};
}


/* Removed pragma: #pragma warning(pop)*/
#line 10 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
/* Removed pragma: #pragma warning(push,3)*/
#line 154 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"
#pragma pack ( pop )
#line 9 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
#pragma pack ( push, 8 )
#line 21
namespace std { 
#line 34
}
#line 24 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"
#pragma pack ( push, 8 )
#line 32
typedef void (__cdecl *terminate_function)(void); 
typedef void (__cdecl *terminate_handler)(void); 
typedef void (__cdecl *unexpected_function)(void); 
typedef void (__cdecl *unexpected_handler)(void); 
#line 50
struct _EXCEPTION_POINTERS; 

typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 


__declspec(dllimport) __declspec(noreturn) void __cdecl terminate(); 
__declspec(dllimport) void __cdecl unexpected(); 

__declspec(dllimport) int __cdecl _is_exception_typeof(const class type_info & _Type, _EXCEPTION_POINTERS * _ExceptionPtr); 



__declspec(dllimport) terminate_function __cdecl set_terminate(terminate_function _NewPtFunc); 
extern "C" __declspec(dllimport) terminate_function __cdecl _get_terminate(); 
__declspec(dllimport) unexpected_function __cdecl set_unexpected(unexpected_function _NewPtFunc); 
extern "C" __declspec(dllimport) unexpected_function __cdecl _get_unexpected(); 




__declspec(dllimport) _se_translator_function __cdecl _set_se_translator(_se_translator_function _NewPtFunc); 

__declspec(dllimport) bool __cdecl __uncaught_exception(); 
#line 82
#pragma pack ( pop )
#line 26 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"
#pragma pack ( push, 8 )
#line 62
extern "C" { typedef 
#line 58
struct _heapinfo { 
int *_pentry; 
size_t _size; 
int _useflag; 
} _HEAPINFO; }
#line 142
extern "C" { __declspec(dllimport) int __cdecl _resetstkoflw(); } 



extern "C" { __declspec(dllimport) unsigned long __cdecl _set_malloc_crt_max_wait(unsigned long _NewValue); } 
#line 157
extern "C" { __declspec(dllimport) void *__cdecl _expand(void * _Memory, size_t _NewSize); } 
extern "C" { __declspec(dllimport) size_t __cdecl _msize(void * _Memory); } 
#line 165
extern "C" { void *__cdecl _alloca(size_t _Size); } 
extern "C" { __declspec(dllimport) int __cdecl _heapadd(void * _Memory, size_t _Size); } 
extern "C" { __declspec(dllimport) int __cdecl _heapchk(); } 
extern "C" { __declspec(dllimport) int __cdecl _heapmin(); } 
extern "C" { __declspec(dllimport) int __cdecl _heapset(unsigned _Fill); } 
extern "C" { __declspec(dllimport) int __cdecl _heapwalk(_HEAPINFO * _EntryInfo); } 
extern "C" { __declspec(dllimport) size_t __cdecl _heapused(size_t * _Used, size_t * _Commit); } 

extern "C" { __declspec(dllimport) intptr_t __cdecl _get_heap_handle(); } 
#line 187
extern "C" { typedef char __static_assert_t[(sizeof(unsigned) <= 8)]; }


/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 6540) /* Removed pragma: #pragma warning(disable:6540)*/
extern "C" { __inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
{ 
if (_Ptr) 
{ 
*((unsigned *)_Ptr) = _Marker; 
_Ptr = (char *)_Ptr + 8; 
}  
return _Ptr; 
} } 
/* Removed pragma: #pragma warning(pop)*/
#line 227
extern "C" { __declspec(noalias) __inline void __cdecl _freea(void *_Memory) 
{ 
unsigned _Marker; 
if (_Memory) 
{ 
_Memory = (char *)_Memory - 8; 
_Marker = *((unsigned *)_Memory); 
if (_Marker == 0xdddd) 
{ 
free(_Memory); 
}  
#line 244
}  
} } 
#line 280
#pragma pack ( pop )
#line 46 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) const void *__cdecl memchr(const void * _Buf, int _Val, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); } 
extern "C" { __declspec(dllimport) int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); } 
extern "C" { int __cdecl memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); } 
extern "C" { void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); } 

extern "C" { __declspec(dllimport) errno_t __cdecl memcpy_s(void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount); } 
#line 88
extern "C" { void *__cdecl memset(void * _Dst, int _Val, size_t _Size); } 



extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memccpy. See online help for details.")) __declspec(dllimport) void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _memicmp. See online help for details.")) __declspec(dllimport) int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); } 




extern "C" { __declspec(dllimport) errno_t __cdecl _strset_s(char * _Dst, size_t _DstSize, int _Value); } 
template < size_t _Size > inline errno_t __cdecl _strset_s ( char ( & _Dest ) [ _Size ], int _Value ) throw ( ) { return _strset_s ( _Dest, _Size, _Value ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char *__cdecl _strset(char * _Dest, int _Value); } 

extern "C" { __declspec(dllimport) errno_t __cdecl strcpy_s(char * _Dst, rsize_t _SizeInBytes, const char * _Src); } 

template < size_t _Size > inline errno_t __cdecl strcpy_s ( char ( & _Dest ) [ _Size ], const char * _Source ) throw ( ) { return strcpy_s ( _Dest, _Size, _Source ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) char *__cdecl strcpy(char * _Dest, const char * _Source); } 

extern "C" { __declspec(dllimport) errno_t __cdecl strcat_s(char * _Dst, rsize_t _SizeInBytes, const char * _Src); } 

template < size_t _Size > inline errno_t __cdecl strcat_s ( char ( & _Dest ) [ _Size ], const char * _Source ) throw ( ) { return strcat_s ( _Dest, _Size, _Source ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) char *__cdecl strcat(char * _Dest, const char * _Source); } 
extern "C" { int __cdecl strcmp(const char * _Str1, const char * _Str2); } 
extern "C" { size_t __cdecl strlen(const char * _Str); } 
extern "C" { __declspec(dllimport) size_t __cdecl strnlen(const char * _Str, size_t _MaxCount); } 

extern "C" { static __inline size_t __cdecl strnlen_s(const char *_Str, size_t _MaxCount) 
{ 
return (_Str == 0) ? 0 : (strnlen(_Str, _MaxCount)); 
} } 


extern "C" { __declspec(dllimport) errno_t __cdecl memmove_s(void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount); } 
#line 127
extern "C" { __declspec(dllimport) void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); } 
#line 135
extern "C" { __declspec(dllimport) char *__cdecl _strdup(const char * _Src); } 
#line 141
extern "C" { __declspec(dllimport) const char *__cdecl strchr(const char * _Str, int _Val); } 
extern "C" { __declspec(dllimport) int __cdecl _stricmp(const char * _Str1, const char * _Str2); } 
extern "C" { __declspec(dllimport) int __cdecl _strcmpi(const char * _Str1, const char * _Str2); } 
extern "C" { __declspec(dllimport) int __cdecl _stricmp_l(const char * _Str1, const char * _Str2, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl strcoll(const char * _Str1, const char * _Str2); } 
extern "C" { __declspec(dllimport) int __cdecl _strcoll_l(const char * _Str1, const char * _Str2, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _stricoll(const char * _Str1, const char * _Str2); } 
extern "C" { __declspec(dllimport) int __cdecl _stricoll_l(const char * _Str1, const char * _Str2, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _strncoll(const char * _Str1, const char * _Str2, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) int __cdecl _strncoll_l(const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _strnicoll(const char * _Str1, const char * _Str2, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) int __cdecl _strnicoll_l(const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) size_t __cdecl strcspn(const char * _Str, const char * _Control); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) char *__cdecl _strerror(const char * _ErrMsg); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _strerror_s(char * _Buf, size_t _SizeInBytes, const char * _ErrMsg); } 
template < size_t _Size > inline errno_t __cdecl _strerror_s ( char ( & _Buffer ) [ _Size ], const char * _ErrorMessage ) throw ( ) { return _strerror_s ( _Buffer, _Size, _ErrorMessage ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) char *__cdecl strerror(int); } 

extern "C" { __declspec(dllimport) errno_t __cdecl strerror_s(char * _Buf, size_t _SizeInBytes, int _ErrNum); } 

template < size_t _Size > inline errno_t __cdecl strerror_s ( char ( & _Buffer ) [ _Size ], int _ErrorMessage ) throw ( ) { return strerror_s ( _Buffer, _Size, _ErrorMessage ); }
extern "C" { __declspec(dllimport) errno_t __cdecl _strlwr_s(char * _Str, size_t _Size); } 
template < size_t _Size > inline errno_t __cdecl _strlwr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strlwr_s ( _String, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char *__cdecl _strlwr(char * _String); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _strlwr_s_l(char * _Str, size_t _Size, _locale_t _Locale); } 
template < size_t _Size > inline errno_t __cdecl _strlwr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strlwr_s_l ( _String, _Size, _Locale ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) errno_t __cdecl strncat_s(char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount); } 

template < size_t _Size > inline errno_t __cdecl strncat_s ( char ( & _Dest ) [ _Size ], const char * _Source, size_t _Count ) throw ( ) { return strncat_s ( _Dest, _Size, _Source, _Count ); }
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 6059) /* Removed pragma: #pragma warning(disable:6059)*/

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char *__cdecl strncat(char * _Dest, const char * _Source, size_t _Count); } 
/* Removed pragma: #pragma warning(pop)*/



extern "C" { __declspec(dllimport) int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); } 

extern "C" { __declspec(dllimport) int __cdecl _strnicmp(const char * _Str1, const char * _Str2, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) int __cdecl _strnicmp_l(const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) errno_t __cdecl strncpy_s(char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount); } 

template < size_t _Size > inline errno_t __cdecl strncpy_s ( char ( & _Dest ) [ _Size ], const char * _Source, size_t _Count ) throw ( ) { return strncpy_s ( _Dest, _Size, _Source, _Count ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char *__cdecl strncpy(char * _Dest, const char * _Source, size_t _Count); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _strnset_s(char * _Str, size_t _SizeInBytes, int _Val, size_t _MaxCount); } 
template < size_t _Size > inline errno_t __cdecl _strnset_s ( char ( & _Dest ) [ _Size ], int _Val, size_t _Count ) throw ( ) { return _strnset_s ( _Dest, _Size, _Val, _Count ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) char *__cdecl _strnset(char * _Dest, int _Val, size_t _Count); } 
extern "C" { __declspec(dllimport) const char *__cdecl strpbrk(const char * _Str, const char * _Control); } 
extern "C" { __declspec(dllimport) const char *__cdecl strrchr(const char * _Str, int _Ch); } 
extern "C" { __declspec(dllimport) char *__cdecl _strrev(char * _Str); } 
extern "C" { __declspec(dllimport) size_t __cdecl strspn(const char * _Str, const char * _Control); } 
extern "C" { __declspec(dllimport) const char *__cdecl strstr(const char * _Str, const char * _SubStr); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) char *__cdecl strtok(char * _Str, const char * _Delim); } 

extern "C" { __declspec(dllimport) char *__cdecl strtok_s(char * _Str, const char * _Delim, char ** _Context); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _strupr_s(char * _Str, size_t _Size); } 
template < size_t _Size > inline errno_t __cdecl _strupr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strupr_s ( _String, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char *__cdecl _strupr(char * _String); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _strupr_s_l(char * _Str, size_t _Size, _locale_t _Locale); } 
template < size_t _Size > inline errno_t __cdecl _strupr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strupr_s_l ( _String, _Size, _Locale ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) char *__cdecl _strupr_l(char * _String, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) size_t __cdecl strxfrm(char * _Dst, const char * _Src, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) size_t __cdecl _strxfrm_l(char * _Dst, const char * _Src, size_t _MaxCount, _locale_t _Locale); } 
#line 214
inline char *__cdecl strchr(char *_Str, int _Ch) 
{ return (char *)strchr((const char *)_Str, _Ch); } 
inline char *__cdecl strpbrk(char *_Str, const char *_Control) 
{ return (char *)strpbrk((const char *)_Str, _Control); } 
inline char *__cdecl strrchr(char *_Str, int _Ch) 
{ return (char *)strrchr((const char *)_Str, _Ch); } 
inline char *__cdecl strstr(char *_Str, const char *_SubStr) 
{ return (char *)strstr((const char *)_Str, _SubStr); } 



inline void *__cdecl memchr(void *_Pv, int _C, size_t _N) 
{ return (void *)memchr((const void *)_Pv, _C, _N); } 
#line 238
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strdup. See online help for details.")) __declspec(dllimport) char *__cdecl strdup(const char * _Src); } 
#line 245
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strcmpi. See online help for details.")) __declspec(dllimport) int __cdecl strcmpi(const char * _Str1, const char * _Str2); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _stricmp. See online help for details.")) __declspec(dllimport) int __cdecl stricmp(const char * _Str1, const char * _Str2); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strlwr. See online help for details.")) __declspec(dllimport) char *__cdecl strlwr(char * _Str); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnicmp. See online help for details.")) __declspec(dllimport) int __cdecl strnicmp(const char * _Str1, const char * _Str, size_t _MaxCount); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strnset. See online help for details.")) __declspec(dllimport) char *__cdecl strnset(char * _Str, int _Val, size_t _MaxCount); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strrev. See online help for details.")) __declspec(dllimport) char *__cdecl strrev(char * _Str); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strset. See online help for details.")) char *__cdecl strset(char * _Str, int _Val); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _strupr. See online help for details.")) __declspec(dllimport) char *__cdecl strupr(char * _Str); } 
#line 266
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcsdup(const __wchar_t * _Str); } 
#line 273
extern "C" { __declspec(dllimport) errno_t __cdecl wcscat_s(__wchar_t * _Dst, rsize_t _SizeInWords, const __wchar_t * _Src); } 

template < size_t _Size > inline errno_t __cdecl wcscat_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source ) throw ( ) { return wcscat_s ( _Dest, _Size, _Source ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcscat(__wchar_t * _Dest, const __wchar_t * _Source); } 
extern "C" { __declspec(dllimport) const __wchar_t *__cdecl wcschr(const __wchar_t * _Str, __wchar_t _Ch); } 
extern "C" { __declspec(dllimport) int __cdecl wcscmp(const __wchar_t * _Str1, const __wchar_t * _Str2); } 

extern "C" { __declspec(dllimport) errno_t __cdecl wcscpy_s(__wchar_t * _Dst, rsize_t _SizeInWords, const __wchar_t * _Src); } 

template < size_t _Size > inline errno_t __cdecl wcscpy_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source ) throw ( ) { return wcscpy_s ( _Dest, _Size, _Source ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcscpy(__wchar_t * _Dest, const __wchar_t * _Source); } 
extern "C" { __declspec(dllimport) size_t __cdecl wcscspn(const __wchar_t * _Str, const __wchar_t * _Control); } 
extern "C" { __declspec(dllimport) size_t __cdecl wcslen(const __wchar_t * _Str); } 
extern "C" { __declspec(dllimport) size_t __cdecl wcsnlen(const __wchar_t * _Src, size_t _MaxCount); } 

extern "C" { static __inline size_t __cdecl wcsnlen_s(const __wchar_t *_Src, size_t _MaxCount) 
{ 
return (_Src == 0) ? 0 : (wcsnlen(_Src, _MaxCount)); 
} } 


extern "C" { __declspec(dllimport) errno_t __cdecl wcsncat_s(__wchar_t * _Dst, rsize_t _SizeInWords, const __wchar_t * _Src, rsize_t _MaxCount); } 

template < size_t _Size > inline errno_t __cdecl wcsncat_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _Count ) throw ( ) { return wcsncat_s ( _Dest, _Size, _Source, _Count ); }
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 6059) /* Removed pragma: #pragma warning(disable:6059)*/
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcsncat(__wchar_t * _Dest, const __wchar_t * _Source, size_t _Count); } 
/* Removed pragma: #pragma warning(pop)*/
extern "C" { __declspec(dllimport) int __cdecl wcsncmp(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 

extern "C" { __declspec(dllimport) errno_t __cdecl wcsncpy_s(__wchar_t * _Dst, rsize_t _SizeInWords, const __wchar_t * _Src, rsize_t _MaxCount); } 

template < size_t _Size > inline errno_t __cdecl wcsncpy_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _Count ) throw ( ) { return wcsncpy_s ( _Dest, _Size, _Source, _Count ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcsncpy(__wchar_t * _Dest, const __wchar_t * _Source, size_t _Count); } 
extern "C" { __declspec(dllimport) const __wchar_t *__cdecl wcspbrk(const __wchar_t * _Str, const __wchar_t * _Control); } 
extern "C" { __declspec(dllimport) const __wchar_t *__cdecl wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); } 
extern "C" { __declspec(dllimport) size_t __cdecl wcsspn(const __wchar_t * _Str, const __wchar_t * _Control); } 
extern "C" { __declspec(dllimport) const __wchar_t *__cdecl wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcstok(__wchar_t * _Str, const __wchar_t * _Delim); } 

extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcstok_s(__wchar_t * _Str, const __wchar_t * _Delim, __wchar_t ** _Context); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wcserror(int _ErrNum); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wcserror_s(__wchar_t * _Buf, size_t _SizeInWords, int _ErrNum); } 
template < size_t _Size > inline errno_t __cdecl _wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], int _Error ) throw ( ) { return _wcserror_s ( _Buffer, _Size, _Error ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl __wcserror(const __wchar_t * _Str); } 
extern "C" { __declspec(dllimport) errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrMsg); } 
template < size_t _Size > inline errno_t __cdecl __wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], const wchar_t * _ErrorMessage ) throw ( ) { return __wcserror_s ( _Buffer, _Size, _ErrorMessage ); }

extern "C" { __declspec(dllimport) int __cdecl _wcsicmp(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsicmp_l(const __wchar_t * _Str1, const __wchar_t * _Str2, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsnicmp(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsnicmp_l(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wcsnset_s(__wchar_t * _Dst, size_t _SizeInWords, __wchar_t _Val, size_t _MaxCount); } 
template < size_t _Size > inline errno_t __cdecl _wcsnset_s ( wchar_t ( & _Dst ) [ _Size ], wchar_t _Val, size_t _MaxCount ) throw ( ) { return _wcsnset_s ( _Dst, _Size, _Val, _MaxCount ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wcsnset(__wchar_t * _Str, __wchar_t _Val, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcsrev(__wchar_t * _Str); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wcsset_s(__wchar_t * _Dst, size_t _SizeInWords, __wchar_t _Value); } 
template < size_t _Size > inline errno_t __cdecl _wcsset_s ( wchar_t ( & _Str ) [ _Size ], wchar_t _Val ) throw ( ) { return _wcsset_s ( _Str, _Size, _Val ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wcsset(__wchar_t * _Str, __wchar_t _Val); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _wcslwr_s(__wchar_t * _Str, size_t _SizeInWords); } 
template < size_t _Size > inline errno_t __cdecl _wcslwr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcslwr_s ( _String, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wcslwr(__wchar_t * _String); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wcslwr_s_l(__wchar_t * _Str, size_t _SizeInWords, _locale_t _Locale); } 
template < size_t _Size > inline errno_t __cdecl _wcslwr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcslwr_s_l ( _String, _Size, _Locale ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wcsupr_s(__wchar_t * _Str, size_t _Size); } 
template < size_t _Size > inline errno_t __cdecl _wcsupr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcsupr_s ( _String, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wcsupr(__wchar_t * _String); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wcsupr_s_l(__wchar_t * _Str, size_t _Size, _locale_t _Locale); } 
template < size_t _Size > inline errno_t __cdecl _wcsupr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcsupr_s_l ( _String, _Size, _Locale ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) size_t __cdecl wcsxfrm(__wchar_t * _Dst, const __wchar_t * _Src, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) size_t __cdecl _wcsxfrm_l(__wchar_t * _Dst, const __wchar_t * _Src, size_t _MaxCount, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl wcscoll(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
extern "C" { __declspec(dllimport) int __cdecl _wcscoll_l(const __wchar_t * _Str1, const __wchar_t * _Str2, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsicoll(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsicoll_l(const __wchar_t * _Str1, const __wchar_t * _Str2, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsncoll(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsncoll_l(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsnicoll(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
extern "C" { __declspec(dllimport) int __cdecl _wcsnicoll_l(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale); } 
#line 361
inline __wchar_t *__cdecl wcschr(__wchar_t *_Str, __wchar_t _Ch) 
{ return ((__wchar_t *)wcschr((const __wchar_t *)_Str, _Ch)); } 
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_Str, const __wchar_t *_Control) 
{ return ((__wchar_t *)wcspbrk((const __wchar_t *)_Str, _Control)); } 
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_Str, __wchar_t _Ch) 
{ return ((__wchar_t *)wcsrchr((const __wchar_t *)_Str, _Ch)); } 
inline __wchar_t *__cdecl wcsstr(__wchar_t *_Str, const __wchar_t *_SubStr) 
{ return ((__wchar_t *)wcsstr((const __wchar_t *)_Str, _SubStr)); } 
#line 380
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsdup. See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcsdup(const __wchar_t * _Str); } 
#line 390
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicmp. See online help for details.")) __declspec(dllimport) int __cdecl wcsicmp(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnicmp. See online help for details.")) __declspec(dllimport) int __cdecl wcsnicmp(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsnset. See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcsnset(__wchar_t * _Str, __wchar_t _Val, size_t _MaxCount); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsrev. See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcsrev(__wchar_t * _Str); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsset. See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcsset(__wchar_t * _Str, __wchar_t _Val); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcslwr. See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcslwr(__wchar_t * _Str); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsupr. See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl wcsupr(__wchar_t * _Str); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _wcsicoll. See online help for details.")) __declspec(dllimport) int __cdecl wcsicoll(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
#line 84 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
namespace std { 
#line 93
class exception { 


public: exception(); 
explicit exception(const char *const &); 
exception(const char *const &, int); 
exception(const exception &); 
exception &operator=(const exception &); 
CPPTEST_IMP__ZNSt9exceptionD9Ev virtual ~exception(); 
CPPTEST_IMP__ZNKSt9exception4whatEv virtual const char *what() const; 


private: void _Copy_str(const char *); 
void _Tidy(); 

const char *_Mywhat; 
bool _Mydofree; 
}; 
#line 192
using ::set_terminate;using ::terminate_handler;using ::terminate;using ::set_unexpected;using ::unexpected_handler;using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception &); 

__declspec(dllimport) bool __cdecl uncaught_exception(); 

}
#line 310
namespace std { 
#line 316
class bad_exception : public exception { 


public: bad_exception(const char *_Message = "bad exception") throw() : exception(_Message) 


{ 
} 

virtual ~bad_exception() throw() 
{ 
} 
#line 337
}; 


class bad_alloc : public exception { 


public: bad_alloc(const char *_Message) throw() : exception(_Message) 

{ 
} 

bad_alloc() throw() : exception("bad allocation", 1) 

{ 
} 

virtual ~bad_alloc() throw() 
{ 
} 
#line 365
}; 



class bad_array_new_length : public bad_alloc { 




public: bad_array_new_length() throw() : bad_alloc("bad array new length") 

{ 
} 
}; 



}
#line 394
__declspec(dllimport) void __cdecl __ExceptionPtrCreate(void *); 
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(void *); 
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(void *, const void *); 
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(void *, const void *); 
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(const void *, const void *); 

__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(void *); 
__declspec(dllimport) void __cdecl __ExceptionPtrRethrow(const void *); 
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *); 

namespace std { 


typedef nullptr_t _Null_type; 




class _Exception_ptr { 


public: _Exception_ptr() 
{ 
__ExceptionPtrCreate(this); 
} 
_Exception_ptr(_Null_type) 
{ 
__ExceptionPtrCreate(this); 
} 
~_Exception_ptr() 
{ 
__ExceptionPtrDestroy(this); 
} 
_Exception_ptr(const _Exception_ptr &_Rhs) 
{ 
__ExceptionPtrCopy(this, const_cast< _Exception_ptr *>(&_Rhs)); 
} 
_Exception_ptr &operator=(const _Exception_ptr &_Rhs) 
{ 
__ExceptionPtrAssign(this, const_cast< _Exception_ptr *>(&_Rhs)); 
return *this; 
} 
_Exception_ptr &operator=(_Null_type) 
{ 
_Exception_ptr _Ptr; 
__ExceptionPtrAssign(this, &_Ptr); 
return *this; 
} 

void _RethrowException() const 
{ 
__ExceptionPtrRethrow(const_cast< _Exception_ptr *>(this)); 
} 

static _Exception_ptr _Current_exception() 
{ 
_Exception_ptr _Retval; 
__ExceptionPtrCurrentException(&_Retval); 
return _Retval; 
} 
static _Exception_ptr _Copy_exception(void *_Except, const void *_Ptr) 
{ 
_Exception_ptr _Retval = 0; 
if (!_Ptr) 
{ 

return _Retval; 
}  
__ExceptionPtrCopyException(&_Retval, _Except, _Ptr); 
return _Retval; 
} 

private: void *_Data1; 
void *_Data2; 
}; 

inline bool operator==(const _Exception_ptr &_Lhs, const _Exception_ptr &_Rhs) 
{ 
return __ExceptionPtrCompare(const_cast< _Exception_ptr *>(&_Lhs), const_cast< _Exception_ptr *>(&_Rhs)); 
} 

inline bool operator==(_Null_type, const _Exception_ptr &_Rhs) 
{ 
_Exception_ptr _Ptr; 
return __ExceptionPtrCompare(&_Ptr, const_cast< _Exception_ptr *>(&_Rhs)); 
} 

inline bool operator==(const _Exception_ptr &_Lhs, _Null_type) 
{ 
return operator==(0, _Lhs); 
} 

typedef _Exception_ptr exception_ptr; 

inline exception_ptr current_exception() 
{ 
return _Exception_ptr::_Current_exception(); 
} 

inline void rethrow_exception(exception_ptr _P) 
{ 
_P._RethrowException(); 
} 

template < class _E > void * __GetExceptionInfo ( _E );

template < class _E > exception_ptr copy_exception ( _E _Except )
 {
 return _Exception_ptr :: _Copy_exception ( & _Except, __GetExceptionInfo ( _Except ) );
 }

}
#line 513
/* Removed pragma: #pragma warning(pop)*/
#pragma pack ( pop )
#line 19 "C:\\Program Files\\Parasoft\\C++test for Visual Studio\\9.5\\engine\\runtime\\include\\cpptest.h"
struct __CPTR_AddressOfType { }; 
#line 512
struct __CPTR_TestRunner; 
#line 614
static const char *CPPTEST_DS_GET_CSTR(const char *name) 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getCStr || cpptestDsMethodNotInitialized("getCStr"))), (cpptestGetCurrentDataSource()->getCStr))(cpptestGetCurrentDataSource(), name); 
} 

static const CppTest_wchar_t *CPPTEST_DS_GET_WCSTR(const char *name) 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getWCStr || cpptestDsMethodNotInitialized("getWCStr"))), (cpptestGetCurrentDataSource()->getWCStr))(cpptestGetCurrentDataSource(), name); 
} 

static const char *CPPTEST_DS_GET_MEM_BUFFER(const char *name, unsigned *sizePtr) 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getMemBuffer || cpptestDsMethodNotInitialized("getMemBuffer"))), (cpptestGetCurrentDataSource()->getMemBuffer))(cpptestGetCurrentDataSource(), name, sizePtr); 
} 
static __int64 CPPTEST_DS_GET_INTEGER(const char *name) 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getInteger || cpptestDsMethodNotInitialized("getInteger"))), (cpptestGetCurrentDataSource()->getInteger))(cpptestGetCurrentDataSource(), name); 
} 
static unsigned __int64 CPPTEST_DS_GET_UINTEGER(const char *name) 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getUInteger || cpptestDsMethodNotInitialized("getUInteger"))), (cpptestGetCurrentDataSource()->getUInteger))(cpptestGetCurrentDataSource(), name); 
} 
static double CPPTEST_DS_GET_FLOAT(const char *name) 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getFloat || cpptestDsMethodNotInitialized("getFloat"))), (cpptestGetCurrentDataSource()->getFloat))(cpptestGetCurrentDataSource(), name); 
} 
static int CPPTEST_DS_GET_BOOL(const char *name) 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getBool || cpptestDsMethodNotInitialized("getBool"))), (cpptestGetCurrentDataSource()->getBool))(cpptestGetCurrentDataSource(), name); 
} 
static char CPPTEST_DS_GET_CHAR(const char *name) 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getChar || cpptestDsMethodNotInitialized("getChar"))), (cpptestGetCurrentDataSource()->getChar))(cpptestGetCurrentDataSource(), name); 
} 
static unsigned CPPTEST_DS_GET_ITERATION() 
{ 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->getIteration || cpptestDsMethodNotInitialized("getIteration"))), (cpptestGetCurrentDataSource()->getIteration))(cpptestGetCurrentDataSource()); 
} 
static int CPPTEST_DS_HAS_COLUMN(const char *name) 
{ 
if (cpptestGetCurrentDataSource() && ((((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->hasColumn || cpptestDsMethodNotInitialized("hasColumn"))), (cpptestGetCurrentDataSource()->hasColumn)))) { 
return (((cpptestGetCurrentDataSource() || cpptestDsNotInitialized()), (cpptestGetCurrentDataSource()->hasColumn || cpptestDsMethodNotInitialized("hasColumn"))), (cpptestGetCurrentDataSource()->hasColumn))(cpptestGetCurrentDataSource(), name); 
}  
return 0; 
} 
#line 806
extern "C" { typedef int CPPTEST_CALL_ROUTINE(const char *); }
#line 943
struct CppTest_TestSuite { 




virtual void setUp() 
{ 
} 




virtual void tearDown() 
{ 
} 

virtual ~CppTest_TestSuite() 
{ 
} 
}; 
#line 20 "c:\\Program Files\\Microsoft SDKs\\Windows\\v7.0A\\include\\SDKDDKVer.h"
/* Removed pragma: #pragma warning(push)*/

#pragma warning(disable: 4001) /* Removed pragma: #pragma warning(disable:4001)*/
#line 270
/* Removed pragma: #pragma warning(pop)*/
#line 26 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#pragma pack ( push, 8 )
#line 56
extern "C" { struct _iobuf { 
char *_ptr; 
int _cnt; 
char *_base; 
int _flag; 
int _file; 
int _charbuf; 
int _bufsiz; 
char *_tmpfname; 
}; }
extern "C" { typedef _iobuf FILE; }
#line 129
extern "C" { __declspec(dllimport) FILE *__cdecl __iob_func(); } 
#line 145
extern "C" { typedef __int64 fpos_t; }
#line 186
extern "C" { __declspec(dllimport) int __cdecl _filbuf(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _flsbuf(int _Ch, FILE * _File); } 




extern "C" { __declspec(dllimport) FILE *__cdecl _fsopen(const char * _Filename, const char * _Mode, int _ShFlag); } 


extern "C" { __declspec(dllimport) void __cdecl clearerr(FILE * _File); } 

extern "C" { __declspec(dllimport) errno_t __cdecl clearerr_s(FILE * _File); } 

extern "C" { __declspec(dllimport) int __cdecl fclose(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _fcloseall(); } 




extern "C" { __declspec(dllimport) FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); } 


extern "C" { __declspec(dllimport) int __cdecl feof(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl ferror(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl fflush(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl fgetc(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _fgetchar(); } 
extern "C" { __declspec(dllimport) int __cdecl fgetpos(FILE * _File, fpos_t * _Pos); } 
extern "C" { __declspec(dllimport) char *__cdecl fgets(char * _Buf, int _MaxCount, FILE * _File); } 




extern "C" { __declspec(dllimport) int __cdecl _fileno(FILE * _File); } 
#line 227
extern "C" { __declspec(dllimport) char *__cdecl _tempnam(const char * _DirName, const char * _FilePrefix); } 
#line 233
extern "C" { __declspec(dllimport) int __cdecl _flushall(); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) FILE *__cdecl fopen(const char * _Filename, const char * _Mode); } 

extern "C" { __declspec(dllimport) errno_t __cdecl fopen_s(FILE ** _File, const char * _Filename, const char * _Mode); } 

extern "C" { __declspec(dllimport) int __cdecl fprintf(FILE * _File, const char * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl fprintf_s(FILE * _File, const char * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl fputc(int _Ch, FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _fputchar(int _Ch); } 
extern "C" { __declspec(dllimport) int __cdecl fputs(const char * _Str, FILE * _File); } 
extern "C" { __declspec(dllimport) size_t __cdecl fread(void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File); } 

extern "C" { __declspec(dllimport) size_t __cdecl fread_s(void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using freopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) FILE *__cdecl freopen(const char * _Filename, const char * _Mode, FILE * _File); } 

extern "C" { __declspec(dllimport) errno_t __cdecl freopen_s(FILE ** _File, const char * _Filename, const char * _Mode, FILE * _OldFile); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using fscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) int __cdecl fscanf(FILE * _File, const char * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _fscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) int __cdecl _fscanf_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 6530) /* Removed pragma: #pragma warning(disable:6530)*/

extern "C" { __declspec(dllimport) int __cdecl fscanf_s(FILE * _File, const char * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl _fscanf_s_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
/* Removed pragma: #pragma warning(pop)*/
extern "C" { __declspec(dllimport) int __cdecl fsetpos(FILE * _File, const fpos_t * _Pos); } 
extern "C" { __declspec(dllimport) int __cdecl fseek(FILE * _File, long _Offset, int _Origin); } 
extern "C" { __declspec(dllimport) long __cdecl ftell(FILE * _File); } 

extern "C" { __declspec(dllimport) int __cdecl _fseeki64(FILE * _File, __int64 _Offset, int _Origin); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _ftelli64(FILE * _File); } 

extern "C" { __declspec(dllimport) size_t __cdecl fwrite(const void * _Str, size_t _Size, size_t _Count, FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl getc(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl getchar(); } 
extern "C" { __declspec(dllimport) int __cdecl _getmaxstdio(); } 

extern "C" { __declspec(dllimport) char *__cdecl gets_s(char * _Buf, rsize_t _Size); } 

template < size_t _Size > inline char * __cdecl gets_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return gets_s ( _Buffer, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using gets_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See" " online help for details.")) __declspec(dllimport) char *__cdecl gets(char * _Buffer); } 
extern "C" { int __cdecl _getw(FILE * _File); } 




extern "C" { __declspec(dllimport) int __cdecl _pclose(FILE * _File); } 
extern "C" { __declspec(dllimport) FILE *__cdecl _popen(const char * _Command, const char * _Mode); } 
extern "C" { __declspec(dllimport) int __cdecl printf(const char * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl printf_s(const char * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl putc(int _Ch, FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl putchar(int _Ch); } 
extern "C" { __declspec(dllimport) int __cdecl puts(const char * _Str); } 
extern "C" { __declspec(dllimport) int __cdecl _putw(int _Word, FILE * _File); } 


extern "C" { __declspec(dllimport) int __cdecl remove(const char * _Filename); } 
extern "C" { __declspec(dllimport) int __cdecl rename(const char * _OldFilename, const char * _NewFilename); } 
extern "C" { __declspec(dllimport) int __cdecl _unlink(const char * _Filename); } 

extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _unlink. See online help for details.")) __declspec(dllimport) int __cdecl unlink(const char * _Filename); } 


extern "C" { __declspec(dllimport) void __cdecl rewind(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _rmtmp(); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) int __cdecl scanf(const char * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _scanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) int __cdecl _scanf_l(const char * _Format, _locale_t _Locale, ...); } 
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 6530) /* Removed pragma: #pragma warning(disable:6530)*/

extern "C" { __declspec(dllimport) int __cdecl scanf_s(const char * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl _scanf_s_l(const char * _Format, _locale_t _Locale, ...); } 
/* Removed pragma: #pragma warning(pop)*/
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using setvbuf instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. Se" "e online help for details.")) __declspec(dllimport) void __cdecl setbuf(FILE * _File, char * _Buffer); } 
extern "C" { __declspec(dllimport) int __cdecl _setmaxstdio(int _Max); } 
extern "C" { __declspec(dllimport) unsigned __cdecl _set_output_format(unsigned _Format); } 
extern "C" { __declspec(dllimport) unsigned __cdecl _get_output_format(); } 
extern "C" { __declspec(dllimport) int __cdecl setvbuf(FILE * _File, char * _Buf, int _Mode, size_t _Size); } 
extern "C" { __declspec(dllimport) int __cdecl _snprintf_s(char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, ...); } 
/* Removed pragma: __pragma( warning(push)) */__pragma(warning(disable: 4793) )/* Removed pragma: __pragma( warning(disable: 4793)) */template < size_t _Size > inline int __cdecl _snprintf_s ( char ( & _Dest ) [ _Size ], size_t _MaxCount, const char * _Format, ... ) throw ( ) { va_list _ArgList; ( _ArgList = ( va_list ) ( & reinterpret_cast < const char & > ( _Format ) ) + ( ( sizeof ( _Format ) + sizeof ( int ) - 1 ) & ~ ( sizeof ( int ) - 1 ) ) ); return _vsnprintf_s ( _Dest, _Size, _MaxCount, _Format, _ArgList ); }/* Removed pragma: __pragma( warning(pop)) */

extern "C" { __declspec(dllimport) int __cdecl sprintf_s(char * _DstBuf, size_t _SizeInBytes, const char * _Format, ...); } 

/* Removed pragma: __pragma( warning(push)) */__pragma(warning(disable: 4793) )/* Removed pragma: __pragma( warning(disable: 4793)) */template < size_t _Size > inline int __cdecl sprintf_s ( char ( & _Dest ) [ _Size ], const char * _Format, ... ) throw ( ) { va_list _ArgList; ( _ArgList = ( va_list ) ( & reinterpret_cast < const char & > ( _Format ) ) + ( ( sizeof ( _Format ) + sizeof ( int ) - 1 ) & ~ ( sizeof ( int ) - 1 ) ) ); return vsprintf_s ( _Dest, _Size, _Format, _ArgList ); }/* Removed pragma: __pragma( warning(pop)) */
extern "C" { __declspec(dllimport) int __cdecl _scprintf(const char * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) int __cdecl sscanf(const char * _Src, const char * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _sscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) int __cdecl _sscanf_l(const char * _Src, const char * _Format, _locale_t _Locale, ...); } 
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 6530) /* Removed pragma: #pragma warning(disable:6530)*/

extern "C" { __declspec(dllimport) int __cdecl sscanf_s(const char * _Src, const char * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl _sscanf_s_l(const char * _Src, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _snscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) int __cdecl _snscanf(const char * _Src, size_t _MaxCount, const char * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _snscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) int __cdecl _snscanf_l(const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _snscanf_s(const char * _Src, size_t _MaxCount, const char * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _snscanf_s_l(const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
/* Removed pragma: #pragma warning(pop)*/
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using tmpfile_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) FILE *__cdecl tmpfile(); } 

extern "C" { __declspec(dllimport) errno_t __cdecl tmpfile_s(FILE ** _File); } 
extern "C" { __declspec(dllimport) errno_t __cdecl tmpnam_s(char * _Buf, rsize_t _Size); } 

template < size_t _Size > inline errno_t __cdecl tmpnam_s ( char ( & _Buf ) [ _Size ] ) throw ( ) { return tmpnam_s ( _Buf, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using tmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) char *__cdecl tmpnam(char * _Buffer); } 
extern "C" { __declspec(dllimport) int __cdecl ungetc(int _Ch, FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl vfprintf(FILE * _File, const char * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl vfprintf_s(FILE * _File, const char * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl vprintf(const char * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl vprintf_s(const char * _Format, va_list _ArgList); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) int __cdecl vsnprintf(char * _DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl vsnprintf_s(char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, va_list _ArgList); } 
template < size_t _Size > inline int __cdecl vsnprintf_s ( char ( & _Dest ) [ _Size ], size_t _MaxCount, const char * _Format, va_list _Args ) throw ( ) { return vsnprintf_s ( _Dest, _Size, _MaxCount, _Format, _Args ); }

extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_s(char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, va_list _ArgList); } 
template < size_t _Size > inline int __cdecl _vsnprintf_s ( char ( & _Dest ) [ _Size ], size_t _MaxCount, const char * _Format, va_list _Args ) throw ( ) { return _vsnprintf_s ( _Dest, _Size, _MaxCount, _Format, _Args ); }
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 4793) /* Removed pragma: #pragma warning(disable:4793)*/
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) int __cdecl _snprintf(char * _Dest, size_t _Count, const char * _Format, ...); } extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) int __cdecl _vsnprintf(char * _Dest, size_t _Count, const char * _Format, va_list _Args); } 
/* Removed pragma: #pragma warning(pop)*/

extern "C" { __declspec(dllimport) int __cdecl vsprintf_s(char * _DstBuf, size_t _SizeInBytes, const char * _Format, va_list _ArgList); } 
template < size_t _Size > inline int __cdecl vsprintf_s ( char ( & _Dest ) [ _Size ], const char * _Format, va_list _Args ) throw ( ) { return vsprintf_s ( _Dest, _Size, _Format, _Args ); }

/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 4793) /* Removed pragma: #pragma warning(disable:4793)*/
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int __cdecl sprintf(char * _Dest, const char * _Format, ...); } extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) int __cdecl vsprintf(char * _Dest, const char * _Format, va_list _Args); } 
/* Removed pragma: #pragma warning(pop)*/
extern "C" { __declspec(dllimport) int __cdecl _vscprintf(const char * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _snprintf_c(char * _DstBuf, size_t _MaxCount, const char * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_c(char * _DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _fprintf_p(FILE * _File, const char * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _printf_p(const char * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _sprintf_p(char * _Dst, size_t _MaxCount, const char * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vfprintf_p(FILE * _File, const char * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vprintf_p(const char * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vsprintf_p(char * _Dst, size_t _MaxCount, const char * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _scprintf_p(const char * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vscprintf_p(const char * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _set_printf_count_output(int _Value); } 
extern "C" { __declspec(dllimport) int __cdecl _get_printf_count_output(); } 

extern "C" { __declspec(dllimport) int __cdecl _printf_l(const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _printf_p_l(const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _printf_s_l(const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vprintf_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vprintf_p_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vprintf_s_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _fprintf_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _fprintf_p_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _fprintf_s_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vfprintf_l(FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vfprintf_p_l(FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vfprintf_s_l(FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _sprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) int __cdecl _sprintf_l(char * _DstBuf, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _sprintf_p_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _sprintf_s_l(char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _vsprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __declspec(dllimport) int __cdecl _vsprintf_l(char * _DstBuf, const char * _Format, _locale_t, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vsprintf_p_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vsprintf_s_l(char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _scprintf_l(const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _scprintf_p_l(const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vscprintf_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vscprintf_p_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _snprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __declspec(dllimport) int __cdecl _snprintf_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _snprintf_c_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _snprintf_s_l(char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNI" "NGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnprintf_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_c_l(char * _DstBuf, size_t _MaxCount, const char *, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_s_l(char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 432
extern "C" { __declspec(dllimport) FILE *__cdecl _wfsopen(const __wchar_t * _Filename, const __wchar_t * _Mode, int _ShFlag); } 


extern "C" { __declspec(dllimport) wint_t __cdecl fgetwc(FILE * _File); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _fgetwchar(); } 
extern "C" { __declspec(dllimport) wint_t __cdecl fputwc(__wchar_t _Ch, FILE * _File); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _fputwchar(__wchar_t _Ch); } 
extern "C" { __declspec(dllimport) wint_t __cdecl getwc(FILE * _File); } 
extern "C" { __declspec(dllimport) inline wint_t __cdecl getwchar(); } 
extern "C" { __declspec(dllimport) wint_t __cdecl putwc(__wchar_t _Ch, FILE * _File); } 
extern "C" { __declspec(dllimport) inline wint_t __cdecl putwchar(__wchar_t _Ch); } 
extern "C" { __declspec(dllimport) wint_t __cdecl ungetwc(wint_t _Ch, FILE * _File); } 

extern "C" { __declspec(dllimport) __wchar_t *__cdecl fgetws(__wchar_t * _Dst, int _SizeInWords, FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl fputws(const __wchar_t * _Str, FILE * _File); } 
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _getws_s(__wchar_t * _Str, size_t _SizeInWords); } 
template < size_t _Size > inline wchar_t * __cdecl _getws_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _getws_s ( _String, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _getws_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _getws(__wchar_t * _String); } 
extern "C" { __declspec(dllimport) int __cdecl _putws(const __wchar_t * _Str); } 

extern "C" { __declspec(dllimport) int __cdecl fwprintf(FILE * _File, const __wchar_t * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl fwprintf_s(FILE * _File, const __wchar_t * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl wprintf(const __wchar_t * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl wprintf_s(const __wchar_t * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl _scwprintf(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl vfwprintf(FILE * _File, const __wchar_t * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl vfwprintf_s(FILE * _File, const __wchar_t * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl vwprintf(const __wchar_t * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl vwprintf_s(const __wchar_t * _Format, va_list _ArgList); } 



extern "C" { __declspec(dllimport) int __cdecl swprintf_s(__wchar_t * _Dst, size_t _SizeInWords, const __wchar_t * _Format, ...); } 

/* Removed pragma: __pragma( warning(push)) */__pragma(warning(disable: 4793) )/* Removed pragma: __pragma( warning(disable: 4793)) */template < size_t _Size > inline int __cdecl swprintf_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Format, ... ) throw ( ) { va_list _ArgList; ( _ArgList = ( va_list ) ( & reinterpret_cast < const char & > ( _Format ) ) + ( ( sizeof ( _Format ) + sizeof ( int ) - 1 ) & ~ ( sizeof ( int ) - 1 ) ) ); return vswprintf_s ( _Dest, _Size, _Format, _ArgList ); }/* Removed pragma: __pragma( warning(pop)) */

extern "C" { __declspec(dllimport) int __cdecl vswprintf_s(__wchar_t * _Dst, size_t _SizeInWords, const __wchar_t * _Format, va_list _ArgList); } 

template < size_t _Size > inline int __cdecl vswprintf_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Format, va_list _Args ) throw ( ) { return vswprintf_s ( _Dest, _Size, _Format, _Args ); }

extern "C" { __declspec(dllimport) int __cdecl _swprintf_c(__wchar_t * _DstBuf, size_t _SizeInWords, const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_c(__wchar_t * _DstBuf, size_t _SizeInWords, const __wchar_t * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _snwprintf_s(__wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const __wchar_t * _Format, ...); } 
/* Removed pragma: __pragma( warning(push)) */__pragma(warning(disable: 4793) )/* Removed pragma: __pragma( warning(disable: 4793)) */template < size_t _Size > inline int __cdecl _snwprintf_s ( wchar_t ( & _Dest ) [ _Size ], size_t _Count, const wchar_t * _Format, ... ) throw ( ) { va_list _ArgList; ( _ArgList = ( va_list ) ( & reinterpret_cast < const char & > ( _Format ) ) + ( ( sizeof ( _Format ) + sizeof ( int ) - 1 ) & ~ ( sizeof ( int ) - 1 ) ) ); return _vsnwprintf_s ( _Dest, _Size, _Count, _Format, _ArgList ); }/* Removed pragma: __pragma( warning(pop)) */
extern "C" { __declspec(dllimport) int __cdecl _vsnwprintf_s(__wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const __wchar_t * _Format, va_list _ArgList); } 
template < size_t _Size > inline int __cdecl _vsnwprintf_s ( wchar_t ( & _Dest ) [ _Size ], size_t _Count, const wchar_t * _Format, va_list _Args ) throw ( ) { return _vsnwprintf_s ( _Dest, _Size, _Count, _Format, _Args ); }
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 4793) /* Removed pragma: #pragma warning(disable:4793)*/
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _snwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) int __cdecl _snwprintf(__wchar_t * _Dest, size_t _Count, const __wchar_t * _Format, ...); } extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnwprintf(__wchar_t * _Dest, size_t _Count, const __wchar_t * _Format, va_list _Args); } 
/* Removed pragma: #pragma warning(pop)*/

extern "C" { __declspec(dllimport) int __cdecl _fwprintf_p(FILE * _File, const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _wprintf_p(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vfwprintf_p(FILE * _File, const __wchar_t * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vwprintf_p(const __wchar_t * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _swprintf_p(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_p(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _scwprintf_p(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vscwprintf_p(const __wchar_t * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _wprintf_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _wprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _wprintf_s_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vwprintf_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vwprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vwprintf_s_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _fwprintf_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _fwprintf_p_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _fwprintf_s_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vfwprintf_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vfwprintf_p_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vfwprintf_s_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _swprintf_c_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _swprintf_p_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _swprintf_s_l(__wchar_t * _DstBuf, size_t _DstSize, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_c_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_p_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_s_l(__wchar_t * _DstBuf, size_t _DstSize, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _scwprintf_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _scwprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vscwprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _snwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNI" "NGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwprintf_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _snwprintf_s_l(__wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARN" "INGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnwprintf_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vsnwprintf_s_l(__wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 542
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 4141 4996 4793) /* Removed pragma: #pragma warning(disable:4141 4996 4793)*/
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _swprintf(__wchar_t * _Dest, const __wchar_t * _Format, ...); } extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _vswprintf(__wchar_t * _Dest, const __wchar_t * _Format, va_list _Args); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using __swprintf_l_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNI" "NGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __swprintf_l(__wchar_t * _Dest, const __wchar_t * _Format, _locale_t _Plocinfo, ...); } extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNI" "NGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __vswprintf_l(__wchar_t * _Dest, const __wchar_t * _Format, _locale_t _Plocinfo, va_list _Args); } 
/* Removed pragma: #pragma warning(pop)*/
#line 34 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"
/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4793 4412) /* Removed pragma: #pragma warning( disable : 4793 4412 )*/
extern "C" { static __inline int swprintf(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, ...) 
{ 
va_list _Arglist; 
int _Ret; 
(_Arglist = (va_list)(&(reinterpret_cast< const char &>(_Format))) + (((sizeof (_Format) + sizeof(int)) - 1) & ~(sizeof(int) - 1))); 
_Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist); 
(_Arglist = (va_list)0); 
return _Ret; 
} } 
/* Removed pragma: #pragma warning( pop )*/

/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4412) /* Removed pragma: #pragma warning( disable : 4412 )*/
extern "C" { static __inline int __cdecl vswprintf(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, va_list _Ap) 
{ 
return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap); 
} } 
/* Removed pragma: #pragma warning( pop )*/




/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4793 4412) /* Removed pragma: #pragma warning( disable : 4793 4412 )*/
extern "C" { static __inline int _swprintf_l(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, _locale_t _Plocinfo, ...) 
{ 
va_list _Arglist; 
int _Ret; 
(_Arglist = (va_list)(&(reinterpret_cast< const char &>(_Plocinfo))) + (((sizeof (_Plocinfo) + sizeof(int)) - 1) & ~(sizeof(int) - 1))); 
_Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist); 
(_Arglist = (va_list)0); 
return _Ret; 
} } 
/* Removed pragma: #pragma warning( pop )*/

/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4412) /* Removed pragma: #pragma warning( disable : 4412 )*/
extern "C" { static __inline int __cdecl _vswprintf_l(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, _locale_t _Plocinfo, va_list _Ap) 
{ 
return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap); 
} } 
/* Removed pragma: #pragma warning( pop )*/


/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4996) /* Removed pragma: #pragma warning( disable : 4996 )*/

/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4793 4141) /* Removed pragma: #pragma warning( disable : 4793 4141 )*/
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __inline int swprintf(__wchar_t *_String, const __wchar_t *_Format, ...) 
{ 
va_list _Arglist; 
(_Arglist = (va_list)(&(reinterpret_cast< const char &>(_Format))) + (((sizeof (_Format) + sizeof(int)) - 1) & ~(sizeof(int) - 1))); 
int _Ret = _vswprintf(_String, _Format, _Arglist); 
(_Arglist = (va_list)0); 
return _Ret; 
} 
/* Removed pragma: #pragma warning( pop )*/

/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4141) /* Removed pragma: #pragma warning( disable : 4141 )*/
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __inline int __cdecl vswprintf(__wchar_t *_String, const __wchar_t *_Format, va_list _Ap) 
{ 
return _vswprintf(_String, _Format, _Ap); 
} 
/* Removed pragma: #pragma warning( pop )*/

/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4793 4141) /* Removed pragma: #pragma warning( disable : 4793 4141 )*/
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _swprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __inline int _swprintf_l(__wchar_t *_String, const __wchar_t *_Format, _locale_t _Plocinfo, ...) 
{ 
va_list _Arglist; 
(_Arglist = (va_list)(&(reinterpret_cast< const char &>(_Plocinfo))) + (((sizeof (_Plocinfo) + sizeof(int)) - 1) & ~(sizeof(int) - 1))); 
int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist); 
(_Arglist = (va_list)0); 
return _Ret; 
} 
/* Removed pragma: #pragma warning( pop )*/

/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4141) /* Removed pragma: #pragma warning( disable : 4141 )*/
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNI" "NGS. See online help for details.")) __inline int __cdecl _vswprintf_l(__wchar_t *_String, const __wchar_t *_Format, _locale_t _Plocinfo, va_list _Ap) 
{ 
return __vswprintf_l(_String, _Format, _Plocinfo, _Ap); 
} 
/* Removed pragma: #pragma warning( pop )*/

/* Removed pragma: #pragma warning( pop )*/
#line 566 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); } 
#line 572
extern "C" { __declspec(dllimport) int __cdecl _vscwprintf(const __wchar_t * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vscwprintf_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using fwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int __cdecl fwscanf(FILE * _File, const __wchar_t * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _fwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) int __cdecl _fwscanf_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 6530) /* Removed pragma: #pragma warning(disable:6530)*/

extern "C" { __declspec(dllimport) int __cdecl fwscanf_s(FILE * _File, const __wchar_t * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl _fwscanf_s_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using swscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int __cdecl swscanf(const __wchar_t * _Src, const __wchar_t * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _swscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) int __cdecl _swscanf_l(const __wchar_t * _Src, const __wchar_t * _Format, _locale_t _Locale, ...); } 

extern "C" { __declspec(dllimport) int __cdecl swscanf_s(const __wchar_t * _Src, const __wchar_t * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl _swscanf_s_l(const __wchar_t * _Src, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _snwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) int __cdecl _snwscanf(const __wchar_t * _Src, size_t _MaxCount, const __wchar_t * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _snwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNIN" "GS. See online help for details.")) __declspec(dllimport) int __cdecl _snwscanf_l(const __wchar_t * _Src, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _snwscanf_s(const __wchar_t * _Src, size_t _MaxCount, const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _snwscanf_s_l(const __wchar_t * _Src, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. S" "ee online help for details.")) __declspec(dllimport) int __cdecl wscanf(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) int __cdecl _wscanf_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 

extern "C" { __declspec(dllimport) int __cdecl wscanf_s(const __wchar_t * _Format, ...); } 

extern "C" { __declspec(dllimport) int __cdecl _wscanf_s_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
/* Removed pragma: #pragma warning(pop)*/

extern "C" { __declspec(dllimport) FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wfopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) FILE *__cdecl _wfopen(const __wchar_t * _Filename, const __wchar_t * _Mode); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wfopen_s(FILE ** _File, const __wchar_t * _Filename, const __wchar_t * _Mode); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wfreopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) FILE *__cdecl _wfreopen(const __wchar_t * _Filename, const __wchar_t * _Mode, FILE * _OldFile); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wfreopen_s(FILE ** _File, const __wchar_t * _Filename, const __wchar_t * _Mode, FILE * _OldFile); } 
#line 610
extern "C" { __declspec(dllimport) FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); } 
extern "C" { __declspec(dllimport) int __cdecl _wremove(const __wchar_t * _Filename); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wtmpnam_s(__wchar_t * _DstBuf, size_t _SizeInWords); } 
template < size_t _Size > inline errno_t __cdecl _wtmpnam_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wtmpnam_s ( _Buffer, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wtmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); } 

extern "C" { __declspec(dllimport) wint_t __cdecl _fgetwc_nolock(FILE * _File); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _fputwc_nolock(__wchar_t _Ch, FILE * _File); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _ungetwc_nolock(wint_t _Ch, FILE * _File); } 
#line 626
extern "C" { inline wint_t __cdecl getwchar() 
{ return (fgetwc((&(__iob_func()[0])))); } } 
extern "C" { inline wint_t __cdecl putwchar(__wchar_t _C) 
{ return (fputwc(_C, (&(__iob_func()[1])))); } } 
#line 675
extern "C" { __declspec(dllimport) void __cdecl _lock_file(FILE * _File); } 
extern "C" { __declspec(dllimport) void __cdecl _unlock_file(FILE * _File); } 

extern "C" { __declspec(dllimport) int __cdecl _fclose_nolock(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _fflush_nolock(FILE * _File); } 
extern "C" { __declspec(dllimport) size_t __cdecl _fread_nolock(void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File); } 
extern "C" { __declspec(dllimport) size_t __cdecl _fread_nolock_s(void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _fseek_nolock(FILE * _File, long _Offset, int _Origin); } 
extern "C" { __declspec(dllimport) long __cdecl _ftell_nolock(FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _fseeki64_nolock(FILE * _File, __int64 _Offset, int _Origin); } 
extern "C" { __declspec(dllimport) __int64 __cdecl _ftelli64_nolock(FILE * _File); } 
extern "C" { __declspec(dllimport) size_t __cdecl _fwrite_nolock(const void * _DstBuf, size_t _Size, size_t _Count, FILE * _File); } 
extern "C" { __declspec(dllimport) int __cdecl _ungetc_nolock(int _Ch, FILE * _File); } 
#line 714
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _tempnam. See online help for details.")) __declspec(dllimport) char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); } 
#line 720
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fcloseall. See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fdopen. See online help for details.")) __declspec(dllimport) FILE *__cdecl fdopen(int _FileHandle, const char * _Format); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fgetchar. See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fileno. See online help for details.")) __declspec(dllimport) int __cdecl fileno(FILE * _File); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _flushall. See online help for details.")) __declspec(dllimport) int __cdecl flushall(); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _fputchar. See online help for details.")) __declspec(dllimport) int __cdecl fputchar(int _Ch); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _getw. See online help for details.")) __declspec(dllimport) int __cdecl getw(FILE * _File); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _putw. See online help for details.")) __declspec(dllimport) int __cdecl putw(int _Ch, FILE * _File); } 
extern "C" { __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: _rmtmp. See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(); } 
#line 27 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tchar.h"
#pragma warning(disable: 4514) /* Removed pragma: #pragma warning(disable:4514)*/
#line 56
#pragma deprecated("_ftcscat")
#pragma deprecated("_ftcschr")
#pragma deprecated("_ftcscpy")
#pragma deprecated("_ftcscspn")
#pragma deprecated("_ftcslen")
#pragma deprecated("_ftcsncat")
#pragma deprecated("_ftcsncpy")
#pragma deprecated("_ftcspbrk")
#pragma deprecated("_ftcsrchr")
#pragma deprecated("_ftcsspn")
#pragma deprecated("_ftcsstr")
#pragma deprecated("_ftcstok")
#pragma deprecated("_ftcsdup")
#pragma deprecated("_ftcsnset")
#pragma deprecated("_ftcsrev")
#pragma deprecated("_ftcsset")
#pragma deprecated("_ftcscmp")
#pragma deprecated("_ftcsicmp")
#pragma deprecated("_ftcsnccmp")
#pragma deprecated("_ftcsncmp")
#pragma deprecated("_ftcsncicmp")
#pragma deprecated("_ftcsnicmp")
#pragma deprecated("_ftcscoll")
#pragma deprecated("_ftcsicoll")
#pragma deprecated("_ftcsnccoll")
#pragma deprecated("_ftcsncoll")
#pragma deprecated("_ftcsncicoll")
#pragma deprecated("_ftcsnicoll")
#pragma deprecated("_ftcsclen")
#pragma deprecated("_ftcsnccat")
#pragma deprecated("_ftcsnccpy")
#pragma deprecated("_ftcsncset")
#pragma deprecated("_ftcsdec")
#pragma deprecated("_ftcsinc")
#pragma deprecated("_ftcsnbcnt")
#pragma deprecated("_ftcsnccnt")
#pragma deprecated("_ftcsnextc")
#pragma deprecated("_ftcsninc")
#pragma deprecated("_ftcsspnp")
#pragma deprecated("_ftcslwr")
#pragma deprecated("_ftcsupr")
#pragma deprecated("_ftclen")
#pragma deprecated("_ftccpy")
#pragma deprecated("_ftccmp")
#line 736 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#pragma pack ( pop )
#line 25 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#pragma pack ( push, 8 )
#line 83
extern "C" { typedef unsigned long _fsize_t; }
#line 89
extern "C" { struct _wfinddata32_t { 
unsigned attrib; 
__time32_t time_create; 
__time32_t time_access; 
__time32_t time_write; 
_fsize_t size; 
__wchar_t name[260]; 
}; }

extern "C" { struct _wfinddata32i64_t { 
unsigned attrib; 
__time32_t time_create; 
__time32_t time_access; 
__time32_t time_write; 
__int64 size; 
__wchar_t name[260]; 
}; }

extern "C" { struct _wfinddata64i32_t { 
unsigned attrib; 
__time64_t time_create; 
__time64_t time_access; 
__time64_t time_write; 
_fsize_t size; 
__wchar_t name[260]; 
}; }

extern "C" { struct _wfinddata64_t { 
unsigned attrib; 
__time64_t time_create; 
__time64_t time_access; 
__time64_t time_write; 
__int64 size; 
__wchar_t name[260]; 
}; }
#line 182
extern "C" { __declspec(dllimport) const unsigned short *__cdecl __pctype_func(); } 

extern "C" __declspec(dllimport) const unsigned short *_pctype; 
#line 195
extern "C" __declspec(dllimport) const unsigned short _wctype[]; 


extern "C" { __declspec(dllimport) const wctype_t *__cdecl __pwctype_func(); } 

extern "C" __declspec(dllimport) const wctype_t *_pwctype; 
#line 230
extern "C" { __declspec(dllimport) int __cdecl iswalpha(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswupper(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswlower(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswdigit(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswxdigit(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswspace(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswpunct(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswalnum(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswprint(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswgraph(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswcntrl(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswascii(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl isleadbyte(int _C); } 
extern "C" { __declspec(dllimport) int __cdecl _isleadbyte_l(int _C, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) wint_t __cdecl towupper(wint_t _C); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) wint_t __cdecl towlower(wint_t _C); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl iswctype(wint_t _C, wctype_t _Type); } 
extern "C" { __declspec(dllimport) int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) int __cdecl __iswcsymf(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale); } 
extern "C" { __declspec(dllimport) int __cdecl __iswcsym(wint_t _C); } 
extern "C" { __declspec(dllimport) int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale); } 

extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instea" "d. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(wint_t _C, wctype_t _Type); } 
#line 286
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wgetcwd(__wchar_t * _DstBuf, int _SizeInWords); } 
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wgetdcwd(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); } 
extern "C" { __wchar_t *__cdecl _wgetdcwd_nolock(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); } 
#line 296
extern "C" { __declspec(dllimport) int __cdecl _wchdir(const __wchar_t * _Path); } 
extern "C" { __declspec(dllimport) int __cdecl _wmkdir(const __wchar_t * _Path); } 
extern "C" { __declspec(dllimport) int __cdecl _wrmdir(const __wchar_t * _Path); } 
#line 305
extern "C" { __declspec(dllimport) int __cdecl _waccess(const __wchar_t * _Filename, int _AccessMode); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _waccess_s(const __wchar_t * _Filename, int _AccessMode); } 
extern "C" { __declspec(dllimport) int __cdecl _wchmod(const __wchar_t * _Filename, int _Mode); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wsopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int __cdecl _wcreat(const __wchar_t * _Filename, int _PermissionMode); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wfindfirst32(const __wchar_t * _Filename, _wfinddata32_t * _FindData); } 
extern "C" { __declspec(dllimport) int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t * _FindData); } 
extern "C" { __declspec(dllimport) int __cdecl _wunlink(const __wchar_t * _Filename); } 
extern "C" { __declspec(dllimport) int __cdecl _wrename(const __wchar_t * _OldFilename, const __wchar_t * _NewFilename); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wmktemp_s(__wchar_t * _TemplateName, size_t _SizeInWords); } 
template < size_t _Size > inline errno_t __cdecl _wmktemp_s ( wchar_t ( & _TemplateName ) [ _Size ] ) throw ( ) { return _wmktemp_s ( _TemplateName, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wmktemp_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wmktemp(__wchar_t * _TemplateName); } 

extern "C" { __declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(const __wchar_t * _Filename, _wfinddata32i64_t * _FindData); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(const __wchar_t * _Filename, _wfinddata64i32_t * _FindData); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wfindfirst64(const __wchar_t * _Filename, _wfinddata64_t * _FindData); } 
extern "C" { __declspec(dllimport) int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t * _FindData); } 
extern "C" { __declspec(dllimport) int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t * _FindData); } 
extern "C" { __declspec(dllimport) int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t * _FindData); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _wsopen_s(int * _FileHandle, const __wchar_t * _Filename, int _OpenFlag, int _ShareFlag, int _PermissionFlag); } 
#line 334
__declspec(deprecated("This function or variable may be unsafe. Consider using _wsopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int __cdecl _wopen(const __wchar_t * _Filename, int _OpenFlag, int _PermissionMode = 0); 
__declspec(deprecated("This function or variable may be unsafe. Consider using _wsopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int __cdecl _wsopen(const __wchar_t * _Filename, int _OpenFlag, int _ShareFlag, int _PermissionMode = 0); 
#line 346
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); } 
#line 355
extern "C" { __declspec(dllimport) intptr_t __cdecl _wexecl(const __wchar_t * _Filename, const __wchar_t * _ArgList, ...); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wexecle(const __wchar_t * _Filename, const __wchar_t * _ArgList, ...); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wexeclp(const __wchar_t * _Filename, const __wchar_t * _ArgList, ...); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wexeclpe(const __wchar_t * _Filename, const __wchar_t * _ArgList, ...); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wexecv(const __wchar_t * _Filename, const __wchar_t *const * _ArgList); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wexecve(const __wchar_t * _Filename, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); } 

extern "C" { __declspec(dllimport) intptr_t __cdecl _wexecvp(const __wchar_t * _Filename, const __wchar_t *const * _ArgList); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wexecvpe(const __wchar_t * _Filename, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); } 

extern "C" { __declspec(dllimport) intptr_t __cdecl _wspawnl(int _Mode, const __wchar_t * _Filename, const __wchar_t * _ArgList, ...); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wspawnle(int _Mode, const __wchar_t * _Filename, const __wchar_t * _ArgList, ...); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wspawnlp(int _Mode, const __wchar_t * _Filename, const __wchar_t * _ArgList, ...); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wspawnlpe(int _Mode, const __wchar_t * _Filename, const __wchar_t * _ArgList, ...); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wspawnv(int _Mode, const __wchar_t * _Filename, const __wchar_t *const * _ArgList); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wspawnve(int _Mode, const __wchar_t * _Filename, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); } 

extern "C" { __declspec(dllimport) intptr_t __cdecl _wspawnvp(int _Mode, const __wchar_t * _Filename, const __wchar_t *const * _ArgList); } 
extern "C" { __declspec(dllimport) intptr_t __cdecl _wspawnvpe(int _Mode, const __wchar_t * _Filename, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); } 
#line 453
extern "C" { typedef unsigned short _ino_t; }


extern "C" { typedef unsigned short ino_t; }
#line 462
extern "C" { typedef unsigned _dev_t; }


extern "C" { typedef unsigned dev_t; }
#line 471
extern "C" { typedef long _off_t; }


extern "C" { typedef long off_t; }
#line 481
extern "C" { struct _stat32 { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
_off_t st_size; 
__time32_t st_atime; 
__time32_t st_mtime; 
__time32_t st_ctime; 
}; }



extern "C" { struct stat { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
_off_t st_size; 
time_t st_atime; 
time_t st_mtime; 
time_t st_ctime; 
}; }



extern "C" { struct _stat32i64 { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
__int64 st_size; 
__time32_t st_atime; 
__time32_t st_mtime; 
__time32_t st_ctime; 
}; }

extern "C" { struct _stat64i32 { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
_off_t st_size; 
__time64_t st_atime; 
__time64_t st_mtime; 
__time64_t st_ctime; 
}; }

extern "C" { struct _stat64 { 
_dev_t st_dev; 
_ino_t st_ino; 
unsigned short st_mode; 
short st_nlink; 
short st_uid; 
short st_gid; 
_dev_t st_rdev; 
__int64 st_size; 
__time64_t st_atime; 
__time64_t st_mtime; 
__time64_t st_ctime; 
}; }
#line 587
extern "C" { __declspec(dllimport) int __cdecl _wstat32(const __wchar_t * _Name, _stat32 * _Stat); } 

extern "C" { __declspec(dllimport) int __cdecl _wstat32i64(const __wchar_t * _Name, _stat32i64 * _Stat); } 
extern "C" { __declspec(dllimport) int __cdecl _wstat64i32(const __wchar_t * _Name, _stat64i32 * _Stat); } 
extern "C" { __declspec(dllimport) int __cdecl _wstat64(const __wchar_t * _Name, _stat64 * _Stat); } 
#line 607
extern "C" { __declspec(dllimport) errno_t __cdecl _cgetws_s(__wchar_t * _Buffer, size_t _SizeInWords, size_t * _SizeRead); } 
template < size_t _Size > inline errno_t __cdecl _cgetws_s ( wchar_t ( & _Buffer ) [ _Size ], size_t * _SizeRead ) throw ( ) { return _cgetws_s ( _Buffer, _Size, _SizeRead ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _cgetws_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _cgetws(__wchar_t * _Buffer); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _getwch(); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _getwche(); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _putwch(__wchar_t _WCh); } 
extern "C" { __declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _WCh); } 
extern "C" { __declspec(dllimport) int __cdecl _cputws(const __wchar_t * _String); } 
extern "C" { __declspec(dllimport) int __cdecl _cwprintf(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _cwprintf_s(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _cwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS." " See online help for details.")) __declspec(dllimport) int __cdecl _cwscanf(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _cwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __declspec(dllimport) int __cdecl _cwscanf_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _cwscanf_s(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _cwscanf_s_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vcwprintf(const __wchar_t * _Format, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vcwprintf_s(const __wchar_t * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _cwprintf_p(const __wchar_t * _Format, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vcwprintf_p(const __wchar_t * _Format, va_list _ArgList); } 

extern "C" { __declspec(dllimport) int __cdecl _cwprintf_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _cwprintf_s_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vcwprintf_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _vcwprintf_s_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
extern "C" { __declspec(dllimport) int __cdecl _cwprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
extern "C" { __declspec(dllimport) int __cdecl _vcwprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 

extern "C" { wint_t __cdecl _putwch_nolock(__wchar_t _WCh); } 
extern "C" { wint_t __cdecl _getwch_nolock(); } 
extern "C" { wint_t __cdecl _getwche_nolock(); } 
extern "C" { wint_t __cdecl _ungetwch_nolock(wint_t _WCh); } 
#line 1110
extern "C" { struct tm { 
int tm_sec; 
int tm_min; 
int tm_hour; 
int tm_mday; 
int tm_mon; 
int tm_year; 
int tm_wday; 
int tm_yday; 
int tm_isdst; 
}; }
#line 1128
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wasctime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wasctime(const tm * _Tm); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wasctime_s(__wchar_t * _Buf, size_t _SizeInWords, const tm * _Tm); } 
template < size_t _Size > inline errno_t __cdecl _wasctime_s ( wchar_t ( & _Buffer ) [ _Size ], const struct tm * _Time ) throw ( ) { return _wasctime_s ( _Buffer, _Size, _Time ); }

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wctime32_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wctime32(const __time32_t * _Time); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wctime32_s(__wchar_t * _Buf, size_t _SizeInWords, const __time32_t * _Time); } 
template < size_t _Size > inline errno_t __cdecl _wctime32_s ( wchar_t ( & _Buffer ) [ _Size ], const __time32_t * _Time ) throw ( ) { return _wctime32_s ( _Buffer, _Size, _Time ); }

extern "C" { __declspec(dllimport) size_t __cdecl wcsftime(__wchar_t * _Buf, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); } 
extern "C" { __declspec(dllimport) size_t __cdecl _wcsftime_l(__wchar_t * _Buf, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _wstrdate_s(__wchar_t * _Buf, size_t _SizeInWords); } 
template < size_t _Size > inline errno_t __cdecl _wstrdate_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrdate_s ( _Buffer, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wstrdate_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); } 

extern "C" { __declspec(dllimport) errno_t __cdecl _wstrtime_s(__wchar_t * _Buf, size_t _SizeInWords); } 
template < size_t _Size > inline errno_t __cdecl _wstrtime_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrtime_s ( _Buffer, _Size ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wstrtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); } 

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wctime64_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) __wchar_t *__cdecl _wctime64(const __time64_t * _Time); } 
extern "C" { __declspec(dllimport) errno_t __cdecl _wctime64_s(__wchar_t * _Buf, size_t _SizeInWords, const __time64_t * _Time); } 
template < size_t _Size > inline errno_t __cdecl _wctime64_s ( wchar_t ( & _Buffer ) [ _Size ], const __time64_t * _Time ) throw ( ) { return _wctime64_s ( _Buffer, _Size, _Time ); }
#line 27 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 4996) /* Removed pragma: #pragma warning(disable:4996)*/
#line 44
extern "C" { static __inline __wchar_t *__cdecl _wctime(const time_t *_Time) 
{ 
/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4996) /* Removed pragma: #pragma warning( disable : 4996 )*/
return _wctime64(_Time); 
/* Removed pragma: #pragma warning( pop )*/
} } 

extern "C" { static __inline errno_t __cdecl _wctime_s(__wchar_t *_Buffer, size_t _SizeInWords, const time_t *_Time) 
{ 
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
} } 


/* Removed pragma: #pragma warning(pop)*/
#line 1159 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
extern "C" { typedef int mbstate_t; }
extern "C" { typedef __wchar_t _Wint_t; }

extern "C" { __declspec(dllimport) wint_t __cdecl btowc(int); } 
extern "C" { __declspec(dllimport) size_t __cdecl mbrlen(const char * _Ch, size_t _SizeInBytes, mbstate_t * _State); } 

extern "C" { __declspec(dllimport) size_t __cdecl mbrtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SizeInBytes, mbstate_t * _State); } 

extern "C" { __declspec(dllimport) errno_t __cdecl mbsrtowcs_s(size_t * _Retval, __wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State); } 
template < size_t _Size > inline errno_t __cdecl mbsrtowcs_s ( size_t * _Retval, wchar_t ( & _Dest ) [ _Size ], const char * * _PSource, size_t _Count, mbstate_t * _State ) throw ( ) { return mbsrtowcs_s ( _Retval, _Dest, _Size, _PSource, _Count, _State ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using mbsrtowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) size_t __cdecl mbsrtowcs(__wchar_t * _Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State); } 

extern "C" { __declspec(dllimport) errno_t __cdecl wcrtomb_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, __wchar_t _Ch, mbstate_t * _State); } 

template < size_t _Size > inline errno_t __cdecl wcrtomb_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t _Source, mbstate_t * _State ) throw ( ) { return wcrtomb_s ( _Retval, _Dest, _Size, _Source, _State ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wcrtomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb(char * _Dest, __wchar_t _Source, mbstate_t * _State); } 
extern "C" { __declspec(dllimport) errno_t __cdecl wcsrtombs_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, const __wchar_t ** _Src, size_t _Size, mbstate_t * _State); } 

template < size_t _Size > inline errno_t __cdecl wcsrtombs_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], const wchar_t * * _PSrc, size_t _Count, mbstate_t * _State ) throw ( ) { return wcsrtombs_s ( _Retval, _Dest, _Size, _PSrc, _Count, _State ); }
extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using wcsrtombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs(char * _Dest, const __wchar_t ** _PSource, size_t _Count, mbstate_t * _State); } 
extern "C" { __declspec(dllimport) int __cdecl wctob(wint_t _WCh); } 
#line 1187
extern "C" { __declspec(dllimport) void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); } 

extern "C" { void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); } 

extern "C" { __declspec(dllimport) errno_t __cdecl memcpy_s(void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount); } 
extern "C" { __declspec(dllimport) errno_t __cdecl memmove_s(void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount); } 

extern "C" { __inline int __cdecl fwide(FILE *_F, int _M) 
{ (void)_F; return (_M); } } 
extern "C" { __inline int __cdecl mbsinit(const mbstate_t *_P) 
{ return (_P == 0 || *_P == 0); } } 
extern "C" { __inline const __wchar_t *__cdecl wmemchr(const __wchar_t *_S, __wchar_t _C, size_t _N) 
{ for (; 0 < _N; (++_S), (--_N)) 
if (*_S == _C) 
return (_S);     
return (0); } } 
extern "C" { __inline int __cdecl wmemcmp(const __wchar_t *_S1, const __wchar_t *_S2, size_t _N) 
{ for (; 0 < _N; ((++_S1), (++_S2)), (--_N)) 
if (*_S1 != *_S2) 
return ((*_S1 < *_S2) ? -1 : (+1));     
return (0); } } 

extern "C" { __inline __wchar_t *__cdecl wmemcpy(__wchar_t *_S1, const __wchar_t *_S2, size_t _N) 
{ 
/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4996 6386) /* Removed pragma: #pragma warning( disable : 4996 6386 )*/
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
/* Removed pragma: #pragma warning( pop )*/
} } 

extern "C" { __inline __wchar_t *__cdecl wmemmove(__wchar_t *_S1, const __wchar_t *_S2, size_t _N) 
{ 
/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4996 6386) /* Removed pragma: #pragma warning( disable : 4996 6386 )*/
#pragma warning(disable: 6387) /* Removed pragma: #pragma warning( disable : 6387)*/

return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
/* Removed pragma: #pragma warning( pop )*/
} } 


extern "C" { errno_t __cdecl wmemcpy_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); } 
extern "C" { errno_t __cdecl wmemmove_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); } 


extern "C" { __inline __wchar_t *__cdecl wmemset(__wchar_t *_S, __wchar_t _C, size_t _N) 
{ 
__wchar_t *_Su = _S; 
for (; 0 < _N; (++_Su), (--_N)) 
{ 
*_Su = _C; 
}  
return (_S); 
} } 



inline __wchar_t *__cdecl wmemchr(__wchar_t *_S, __wchar_t _C, size_t _N) 
{ return (__wchar_t *)wmemchr((const __wchar_t *)_S, _C, _N); } 
#line 1254
#pragma pack ( pop )
#line 189 "c:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\include\\tchar.h"
extern "C" { typedef __wchar_t _TCHAR; }
extern "C" { typedef __wchar_t _TSCHAR; }
extern "C" { typedef __wchar_t _TUCHAR; }
extern "C" { typedef __wchar_t _TXCHAR; }
extern "C" { typedef wint_t _TINT; }
#line 199
extern "C" { typedef __wchar_t TCHAR; }
#line 643
extern "C" { __inline size_t __cdecl _tclen(const __wchar_t *_Cpc) 
{ 

(void *)_Cpc; 
return 1; 
} } 
extern "C" { __inline void __cdecl _tccpy(__wchar_t *_Pc1, const __wchar_t *_Cpc2) { *_Pc1 = (__wchar_t)(*_Cpc2); } } 
extern "C" { __inline void __cdecl _tccpy_l(__wchar_t *_Pc1, const __wchar_t *_Cpc2, _locale_t _Locale) 
{ 
(void)_Locale; 
_tccpy(_Pc1, _Cpc2); 
} } 
extern "C" { __inline int __cdecl _tccmp(const __wchar_t *_Cpc1, const __wchar_t *_Cpc2) { return (int)((*_Cpc1) - (*_Cpc2)); } } 
#line 718
extern "C" { __inline __wchar_t *__cdecl _wcsdec(const __wchar_t *_Cpc1, const __wchar_t *_Cpc2) { return (__wchar_t *)(((_Cpc1) >= (_Cpc2)) ? 0 : ((_Cpc2) - 1)); } } 
extern "C" { __inline __wchar_t *__cdecl _wcsinc(const __wchar_t *_Pc) { return (__wchar_t *)(_Pc + 1); } } 
extern "C" { __inline unsigned __cdecl _wcsnextc(const __wchar_t *_Cpc) { return (unsigned)(*_Cpc); } } 
extern "C" { __inline __wchar_t *__cdecl _wcsninc(const __wchar_t *_Pc, size_t _Sz) { return (__wchar_t *)(_Pc + _Sz); } } 
extern "C" { __inline size_t __cdecl _wcsncnt(const __wchar_t *_String, size_t _Cnt) 
{ 
size_t n = _Cnt; 
__wchar_t *cp = (__wchar_t *)_String; 
while (n-- && *cp) 
cp++;   
return _Cnt - n - 1; 
} } 
extern "C" { __inline __wchar_t *__cdecl _wcsspnp(const __wchar_t *

_Cpc1, const __wchar_t *
_Cpc2) 

{ 
return (_Cpc1 == 0) ? 0 : ((*(_Cpc1 += wcsspn(_Cpc1, _Cpc2)) != '\000') ? (__wchar_t *)_Cpc1 : (0)); 
} } 


extern "C" { __inline errno_t __cdecl _wcsncpy_s_l(__wchar_t *_Destination, size_t _Destination_size_chars, const __wchar_t *_Source, size_t _Count, _locale_t _Locale) 
{ 
(void)_Locale; 
return wcsncpy_s(_Destination, _Destination_size_chars, _Source, _Count); 
} } 


template < size_t _Size > inline errno_t __cdecl _wcsncpy_s_l ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _Count, _locale_t _Locale ) throw ( ) { return _wcsncpy_s_l ( _Dest, _Size, _Source, _Count, _Locale ); }

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcsncpy_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __inline __wchar_t *__cdecl _wcsncpy_l(__wchar_t *_Dst, const __wchar_t *_Source, size_t _Count, _locale_t _Locale) 
{ 
(void)_Locale; 
/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4996 6054) /* Removed pragma: #pragma warning( disable : 4996 6054)*/
return wcsncpy(_Dst, _Source, _Count); 
/* Removed pragma: #pragma warning( pop )*/
} } 




extern "C" { __inline errno_t __cdecl _wcsncat_s_l(__wchar_t *_Destination, size_t _Destination_size_chars, const __wchar_t *_Source, size_t _Count, _locale_t _Locale) 
{ 
(void)_Locale; 
return wcsncat_s(_Destination, _Destination_size_chars, _Source, _Count); 
} } 


template < size_t _Size > inline errno_t __cdecl _wcsncat_s_l ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _Count, _locale_t _Locale ) throw ( ) { return _wcsncat_s_l ( _Dest, _Size, _Source, _Count, _Locale ); }

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcsncat_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __inline __wchar_t *__cdecl _wcsncat_l(__wchar_t *_Dst, const __wchar_t *_Source, size_t _Count, _locale_t _Locale) 
{ 
(void)_Locale; 
/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4996 6054 6059) /* Removed pragma: #pragma warning( disable : 4996 6054 6059)*/

return wcsncat(_Dst, _Source, _Count); 
/* Removed pragma: #pragma warning( pop )*/
} } 



extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcstok_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __inline __wchar_t *_wcstok_l(__wchar_t *_String, const __wchar_t *_Delimiters, _locale_t _Locale) 
{ 
(void)_Locale; 
/* Removed pragma: #pragma warning(push)*/
#pragma warning(disable: 4996) /* Removed pragma: #pragma warning(disable:4996)*/
return wcstok(_String, _Delimiters); 
/* Removed pragma: #pragma warning(pop)*/
} } 

extern "C" { __inline __wchar_t *_wcstok_s_l(__wchar_t *_String, const __wchar_t *_Delimiters, __wchar_t **_Current_position, _locale_t _Locale) 
{ 
(void)_Locale; 
return wcstok_s(_String, _Delimiters, _Current_position); 
} } 

extern "C" { __inline errno_t _wcsnset_s_l(__wchar_t *_Destination, size_t _Destination_size_chars, __wchar_t _Value, size_t _Count, _locale_t _Locale) 
{ 
(void)_Locale; 
return _wcsnset_s(_Destination, _Destination_size_chars, _Value, _Count); 
} } 

template < size_t _Size > inline errno_t __cdecl _wcsnset_s_l ( wchar_t ( & _Dest ) [ _Size ], wchar_t _Value, size_t _Count, _locale_t _Locale ) throw ( ) { return _wcsnset_s_l ( _Dest, _Size, _Value, _Count, _Locale ); }

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcsnset_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNING" "S. See online help for details.")) __inline __wchar_t *__cdecl _wcsnset_l(__wchar_t *_Dst, __wchar_t _Value, size_t _MaxCount, _locale_t _Locale) 
{ 
(void)_Locale; 
/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4996) /* Removed pragma: #pragma warning( disable : 4996 )*/
return _wcsnset(_Dst, _Value, _MaxCount); 
/* Removed pragma: #pragma warning( pop )*/
} } 



extern "C" { __inline errno_t _wcsset_s_l(__wchar_t *_Destination, size_t _Destination_size_chars, __wchar_t _Value, _locale_t _Locale) 
{ 
(void)_Locale; 
return _wcsset_s(_Destination, _Destination_size_chars, _Value); 
} } 

template < size_t _Size > inline errno_t __cdecl _wcsset_s_l ( wchar_t ( & _Dest ) [ _Size ], wchar_t _Value, _locale_t _Locale ) throw ( ) { return _wcsset_s_l ( _Dest, _Size, _Value, _Locale ); }

extern "C" { __declspec(deprecated("This function or variable may be unsafe. Consider using _wcsset_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS" ". See online help for details.")) __inline __wchar_t *__cdecl _wcsset_l(__wchar_t *_Dst, __wchar_t _Value, _locale_t _Locale) 
{ 
(void)_Locale; 
/* Removed pragma: #pragma warning( push )*/
#pragma warning(disable: 4996) /* Removed pragma: #pragma warning( disable : 4996 )*/
return _wcsset(_Dst, _Value); 
/* Removed pragma: #pragma warning( pop )*/
} } 
#line 6 "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\Calculator.h"
namespace CalculatorProject { 

class Calculator { 


public: int add(int x, int y); 
int minus(int x, int y); 
int multiply(int x, int y); 
int divide(int x, int y); 
}; 
}
#line 6 "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\Calculator.cpp"
using namespace CalculatorProject;


int newMain(int argc, _TCHAR *argv[]) 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() unsigned int _Insure_funcID = cpptestCoverageFunction(__CPTR_cui, _cpptest_strdata[2], 1);cpptestCoverageStmt(1U, 0U, __CPTR_cui, _Insure_funcID, 1);CPPTEST_STACK_TRACE_STMT_INFO(1) 
return 0; return 0;CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




int CalculatorProject::Calculator::add(int x, int y) 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() unsigned int _Insure_funcID = cpptestCoverageFunction(__CPTR_cui, _cpptest_strdata[3], 2);cpptestCoverageStmt(1U, 1U, __CPTR_cui, _Insure_funcID, 2);CPPTEST_STACK_TRACE_STMT_INFO(2) 
return x + y; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 


int CalculatorProject::Calculator::minus(int x, int y) 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() unsigned int _Insure_funcID = cpptestCoverageFunction(__CPTR_cui, _cpptest_strdata[4], 3);cpptestCoverageStmt(1U, 2U, __CPTR_cui, _Insure_funcID, 3);CPPTEST_STACK_TRACE_STMT_INFO(3) 
return x - y; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 

int CalculatorProject::Calculator::multiply(int x, int y) 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() unsigned int _Insure_funcID = cpptestCoverageFunction(__CPTR_cui, _cpptest_strdata[5], 4);cpptestCoverageStmt(1U, 3U, __CPTR_cui, _Insure_funcID, 4);CPPTEST_STACK_TRACE_STMT_INFO(4) 
return x * y; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 

int CalculatorProject::Calculator::divide(int x, int y) 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() unsigned int _Insure_funcID = cpptestCoverageFunction(__CPTR_cui, _cpptest_strdata[6], 5);cpptestCoverageStmt(1U, 4U, __CPTR_cui, _Insure_funcID, 5);CPPTEST_STACK_TRACE_STMT_INFO(5) 
return x / y; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 

} ;
#line 6 "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376\\TestSuite_Calculator_cpp.cpp"
class TestSuite_Calculator_cpp_a3ed44a1 : public CppTest_TestSuite { 


public: typedef TestSuite_Calculator_cpp_a3ed44a1 ThisTestSuite; static void (TestSuite_Calculator_cpp_a3ed44a1::*call_slave_ptr)(void); static void call_slave() { CPPTEST_STACK_TRACE_FUNC_START_INFO() CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_0, 6) TestSuite_Calculator_cpp_a3ed44a1 s; CPPTEST_STACK_TRACE_STMT_INFO(7) cpptestIgnoreCurrStackElement(); CPPTEST_STACK_TRACE_STMT_INFO(8) s.setUp(); CPPTEST_STACK_TRACE_STMT_INFO(9) (s.*call_slave_ptr)(); CPPTEST_STACK_TRACE_STMT_INFO(10) s.tearDown(); CPPTEST_STACK_TRACE_EXIT_ROUTINE() } static void testSuiteBegin() { CPPTEST_STACK_TRACE_FUNC_START_INFO() CPPTEST_STACK_TRACE_STMT_INFO(11) cpptestTestSuiteBegin(_cpptest_strdata_var(7, "TestSuite_Calculator_cpp_a3ed44a1"), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 9); CPPTEST_STACK_TRACE_EXIT_ROUTINE() } static void cpptest_test_no_exception(void (TestSuite_Calculator_cpp_a3ed44a1::*testcase_ptr)(void)) { CPPTEST_STACK_TRACE_FUNC_START_INFO() CPPTEST_STACK_TRACE_STMT_INFO(12) cpptestIgnoreCurrStackElement(); CPPTEST_STACK_TRACE_STMT_INFO(13) try { CPPTEST_STACK_TRACE_STMT_INFO(14) try { CPPTEST_STACK_TRACE_STMT_INFO(15) call_slave_ptr = testcase_ptr; CPPTEST_STACK_TRACE_STMT_INFO(16) cpptestTestCaseSlave(&call_slave); CPPTEST_STACK_TRACE_BLOCK_END_INFO(17) } catch (std::exception &except) { CPPTEST_STACK_TRACE_EXCEPTION_HANDLER_START_INFO() CPPTEST_STACK_TRACE_STMT_INFO(18) cpptestIgnoreCurrStackElement(); CPPTEST_STACK_TRACE_STMT_INFO(19) cpptestUnhandledStdExceptionInTestCase(except.what()); CPPTEST_STACK_TRACE_BLOCK_END_INFO(20) CPPTEST_STACK_TRACE_EXIT_EXCEPTION_HANDLER() } catch (...) { CPPTEST_STACK_TRACE_EXCEPTION_HANDLER_START_INFO() CPPTEST_STACK_TRACE_STMT_INFO(21) cpptestIgnoreCurrStackElement(); CPPTEST_STACK_TRACE_STMT_INFO(22) cpptestUnhandledCppExceptionInTestCase(); CPPTEST_STACK_TRACE_BLOCK_END_INFO(23) CPPTEST_STACK_TRACE_EXIT_EXCEPTION_HANDLER() }  CPPTEST_STACK_TRACE_BLOCK_END_INFO(24) } catch (...) { CPPTEST_STACK_TRACE_EXCEPTION_HANDLER_START_INFO() CPPTEST_STACK_TRACE_BLOCK_END_INFO(25) CPPTEST_STACK_TRACE_EXIT_EXCEPTION_HANDLER() }  CPPTEST_STACK_TRACE_EXIT_ROUTINE() } static int call(const char *name) { CPPTEST_STACK_TRACE_FUNC_START_INFO() CPPTEST_STACK_TRACE_STMT_INFO(26) cpptestIgnoreCurrStackElement(); CPPTEST_STACK_TRACE_STMT_INFO(27) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(28) , cpptestStrCmp(name, "test_add_1") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(29) cpptestTestCaseBegin(_cpptest_strdata_var(9, "test_add_1"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 10); CPPTEST_STACK_TRACE_STMT_INFO(30) cpptest_test_no_exception(&ThisTestSuite::test_add_1); CPPTEST_STACK_TRACE_STMT_INFO(31) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(32) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(33) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(34) , cpptestStrCmp(name, "test_add_10") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(35) cpptestTestCaseBegin(_cpptest_strdata_var(10, "test_add_10"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 11); CPPTEST_STACK_TRACE_STMT_INFO(36) cpptest_test_no_exception(&ThisTestSuite::test_add_10); CPPTEST_STACK_TRACE_STMT_INFO(37) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(38) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(39) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(40) , cpptestStrCmp(name, "test_add_2") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(41) cpptestTestCaseBegin(_cpptest_strdata_var(11, "test_add_2"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 12); CPPTEST_STACK_TRACE_STMT_INFO(42) cpptest_test_no_exception(&ThisTestSuite::test_add_2); CPPTEST_STACK_TRACE_STMT_INFO(43) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(44) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(45) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(46) , cpptestStrCmp(name, "test_add_3") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(47) cpptestTestCaseBegin(_cpptest_strdata_var(12, "test_add_3"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 13); CPPTEST_STACK_TRACE_STMT_INFO(48) cpptest_test_no_exception(&ThisTestSuite::test_add_3); CPPTEST_STACK_TRACE_STMT_INFO(49) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(50) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(51) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(52) , cpptestStrCmp(name, "test_add_4") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(53) cpptestTestCaseBegin(_cpptest_strdata_var(13, "test_add_4"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 14); CPPTEST_STACK_TRACE_STMT_INFO(54) cpptest_test_no_exception(&ThisTestSuite::test_add_4); CPPTEST_STACK_TRACE_STMT_INFO(55) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(56) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(57) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(58) , cpptestStrCmp(name, "test_add_5") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(59) cpptestTestCaseBegin(_cpptest_strdata_var(14, "test_add_5"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 15); CPPTEST_STACK_TRACE_STMT_INFO(60) cpptest_test_no_exception(&ThisTestSuite::test_add_5); CPPTEST_STACK_TRACE_STMT_INFO(61) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(62) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(63) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(64) , cpptestStrCmp(name, "test_add_6") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(65) cpptestTestCaseBegin(_cpptest_strdata_var(15, "test_add_6"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 16); CPPTEST_STACK_TRACE_STMT_INFO(66) cpptest_test_no_exception(&ThisTestSuite::test_add_6); CPPTEST_STACK_TRACE_STMT_INFO(67) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(68) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(69) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(70) , cpptestStrCmp(name, "test_add_7") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(71) cpptestTestCaseBegin(_cpptest_strdata_var(16, "test_add_7"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 17); CPPTEST_STACK_TRACE_STMT_INFO(72) cpptest_test_no_exception(&ThisTestSuite::test_add_7); CPPTEST_STACK_TRACE_STMT_INFO(73) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(74) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(75) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(76) , cpptestStrCmp(name, "test_add_8") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(77) cpptestTestCaseBegin(_cpptest_strdata_var(17, "test_add_8"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 18); CPPTEST_STACK_TRACE_STMT_INFO(78) cpptest_test_no_exception(&ThisTestSuite::test_add_8); CPPTEST_STACK_TRACE_STMT_INFO(79) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(80) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(81) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(82) , cpptestStrCmp(name, "test_add_9") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(83) cpptestTestCaseBegin(_cpptest_strdata_var(18, "test_add_9"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 19); CPPTEST_STACK_TRACE_STMT_INFO(84) cpptest_test_no_exception(&ThisTestSuite::test_add_9); CPPTEST_STACK_TRACE_STMT_INFO(85) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(86) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(87) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(88) , cpptestStrCmp(name, "test_divide_1") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(89) cpptestTestCaseBegin(_cpptest_strdata_var(19, "test_divide_1"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 20); CPPTEST_STACK_TRACE_STMT_INFO(90) cpptest_test_no_exception(&ThisTestSuite::test_divide_1); CPPTEST_STACK_TRACE_STMT_INFO(91) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(92) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(93) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(94) , cpptestStrCmp(name, "test_divide_10") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(95) cpptestTestCaseBegin(_cpptest_strdata_var(20, "test_divide_10"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 21); CPPTEST_STACK_TRACE_STMT_INFO(96) cpptest_test_no_exception(&ThisTestSuite::test_divide_10); CPPTEST_STACK_TRACE_STMT_INFO(97) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(98) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(99) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(100) , cpptestStrCmp(name, "test_divide_2") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(101) cpptestTestCaseBegin(_cpptest_strdata_var(21, "test_divide_2"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 22); CPPTEST_STACK_TRACE_STMT_INFO(102) cpptest_test_no_exception(&ThisTestSuite::test_divide_2); CPPTEST_STACK_TRACE_STMT_INFO(103) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(104) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(105) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(106) , cpptestStrCmp(name, "test_divide_3") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(107) cpptestTestCaseBegin(_cpptest_strdata_var(22, "test_divide_3"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 23); CPPTEST_STACK_TRACE_STMT_INFO(108) cpptest_test_no_exception(&ThisTestSuite::test_divide_3); CPPTEST_STACK_TRACE_STMT_INFO(109) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(110) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(111) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(112) , cpptestStrCmp(name, "test_divide_4") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(113) cpptestTestCaseBegin(_cpptest_strdata_var(23, "test_divide_4"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 24); CPPTEST_STACK_TRACE_STMT_INFO(114) cpptest_test_no_exception(&ThisTestSuite::test_divide_4); CPPTEST_STACK_TRACE_STMT_INFO(115) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(116) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(117) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(118) , cpptestStrCmp(name, "test_divide_5") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(119) cpptestTestCaseBegin(_cpptest_strdata_var(24, "test_divide_5"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 25); CPPTEST_STACK_TRACE_STMT_INFO(120) cpptest_test_no_exception(&ThisTestSuite::test_divide_5); CPPTEST_STACK_TRACE_STMT_INFO(121) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(122) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(123) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(124) , cpptestStrCmp(name, "test_divide_6") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(125) cpptestTestCaseBegin(_cpptest_strdata_var(25, "test_divide_6"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 26); CPPTEST_STACK_TRACE_STMT_INFO(126) cpptest_test_no_exception(&ThisTestSuite::test_divide_6); CPPTEST_STACK_TRACE_STMT_INFO(127) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(128) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(129) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(130) , cpptestStrCmp(name, "test_divide_7") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(131) cpptestTestCaseBegin(_cpptest_strdata_var(26, "test_divide_7"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 27); CPPTEST_STACK_TRACE_STMT_INFO(132) cpptest_test_no_exception(&ThisTestSuite::test_divide_7); CPPTEST_STACK_TRACE_STMT_INFO(133) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(134) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(135) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(136) , cpptestStrCmp(name, "test_divide_8") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(137) cpptestTestCaseBegin(_cpptest_strdata_var(27, "test_divide_8"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 28); CPPTEST_STACK_TRACE_STMT_INFO(138) cpptest_test_no_exception(&ThisTestSuite::test_divide_8); CPPTEST_STACK_TRACE_STMT_INFO(139) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(140) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(141) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(142) , cpptestStrCmp(name, "test_divide_9") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(143) cpptestTestCaseBegin(_cpptest_strdata_var(28, "test_divide_9"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 29); CPPTEST_STACK_TRACE_STMT_INFO(144) cpptest_test_no_exception(&ThisTestSuite::test_divide_9); CPPTEST_STACK_TRACE_STMT_INFO(145) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(146) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(147) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(148) , cpptestStrCmp(name, "test_minus_1") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(149) cpptestTestCaseBegin(_cpptest_strdata_var(29, "test_minus_1"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 30); CPPTEST_STACK_TRACE_STMT_INFO(150) cpptest_test_no_exception(&ThisTestSuite::test_minus_1); CPPTEST_STACK_TRACE_STMT_INFO(151) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(152) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(153) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(154) , cpptestStrCmp(name, "test_minus_10") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(155) cpptestTestCaseBegin(_cpptest_strdata_var(30, "test_minus_10"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 31); CPPTEST_STACK_TRACE_STMT_INFO(156) cpptest_test_no_exception(&ThisTestSuite::test_minus_10); CPPTEST_STACK_TRACE_STMT_INFO(157) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(158) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(159) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(160) , cpptestStrCmp(name, "test_minus_2") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(161) cpptestTestCaseBegin(_cpptest_strdata_var(31, "test_minus_2"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 32); CPPTEST_STACK_TRACE_STMT_INFO(162) cpptest_test_no_exception(&ThisTestSuite::test_minus_2); CPPTEST_STACK_TRACE_STMT_INFO(163) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(164) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(165) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(166) , cpptestStrCmp(name, "test_minus_3") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(167) cpptestTestCaseBegin(_cpptest_strdata_var(32, "test_minus_3"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 33); CPPTEST_STACK_TRACE_STMT_INFO(168) cpptest_test_no_exception(&ThisTestSuite::test_minus_3); CPPTEST_STACK_TRACE_STMT_INFO(169) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(170) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(171) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(172) , cpptestStrCmp(name, "test_minus_4") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(173) cpptestTestCaseBegin(_cpptest_strdata_var(33, "test_minus_4"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 34); CPPTEST_STACK_TRACE_STMT_INFO(174) cpptest_test_no_exception(&ThisTestSuite::test_minus_4); CPPTEST_STACK_TRACE_STMT_INFO(175) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(176) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(177) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(178) , cpptestStrCmp(name, "test_minus_5") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(179) cpptestTestCaseBegin(_cpptest_strdata_var(34, "test_minus_5"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 35); CPPTEST_STACK_TRACE_STMT_INFO(180) cpptest_test_no_exception(&ThisTestSuite::test_minus_5); CPPTEST_STACK_TRACE_STMT_INFO(181) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(182) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(183) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(184) , cpptestStrCmp(name, "test_minus_6") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(185) cpptestTestCaseBegin(_cpptest_strdata_var(35, "test_minus_6"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 36); CPPTEST_STACK_TRACE_STMT_INFO(186) cpptest_test_no_exception(&ThisTestSuite::test_minus_6); CPPTEST_STACK_TRACE_STMT_INFO(187) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(188) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(189) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(190) , cpptestStrCmp(name, "test_minus_7") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(191) cpptestTestCaseBegin(_cpptest_strdata_var(36, "test_minus_7"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 37); CPPTEST_STACK_TRACE_STMT_INFO(192) cpptest_test_no_exception(&ThisTestSuite::test_minus_7); CPPTEST_STACK_TRACE_STMT_INFO(193) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(194) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(195) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(196) , cpptestStrCmp(name, "test_minus_8") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(197) cpptestTestCaseBegin(_cpptest_strdata_var(37, "test_minus_8"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 38); CPPTEST_STACK_TRACE_STMT_INFO(198) cpptest_test_no_exception(&ThisTestSuite::test_minus_8); CPPTEST_STACK_TRACE_STMT_INFO(199) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(200) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(201) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(202) , cpptestStrCmp(name, "test_minus_9") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(203) cpptestTestCaseBegin(_cpptest_strdata_var(38, "test_minus_9"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 39); CPPTEST_STACK_TRACE_STMT_INFO(204) cpptest_test_no_exception(&ThisTestSuite::test_minus_9); CPPTEST_STACK_TRACE_STMT_INFO(205) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(206) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(207) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(208) , cpptestStrCmp(name, "test_multiply_1") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(209) cpptestTestCaseBegin(_cpptest_strdata_var(39, "test_multiply_1"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 40); CPPTEST_STACK_TRACE_STMT_INFO(210) cpptest_test_no_exception(&ThisTestSuite::test_multiply_1); CPPTEST_STACK_TRACE_STMT_INFO(211) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(212) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(213) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(214) , cpptestStrCmp(name, "test_multiply_10") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(215) cpptestTestCaseBegin(_cpptest_strdata_var(40, "test_multiply_10"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 41); CPPTEST_STACK_TRACE_STMT_INFO(216) cpptest_test_no_exception(&ThisTestSuite::test_multiply_10); CPPTEST_STACK_TRACE_STMT_INFO(217) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(218) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(219) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(220) , cpptestStrCmp(name, "test_multiply_2") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(221) cpptestTestCaseBegin(_cpptest_strdata_var(41, "test_multiply_2"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 42); CPPTEST_STACK_TRACE_STMT_INFO(222) cpptest_test_no_exception(&ThisTestSuite::test_multiply_2); CPPTEST_STACK_TRACE_STMT_INFO(223) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(224) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(225) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(226) , cpptestStrCmp(name, "test_multiply_3") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(227) cpptestTestCaseBegin(_cpptest_strdata_var(42, "test_multiply_3"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 43); CPPTEST_STACK_TRACE_STMT_INFO(228) cpptest_test_no_exception(&ThisTestSuite::test_multiply_3); CPPTEST_STACK_TRACE_STMT_INFO(229) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(230) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(231) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(232) , cpptestStrCmp(name, "test_multiply_4") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(233) cpptestTestCaseBegin(_cpptest_strdata_var(43, "test_multiply_4"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 44); CPPTEST_STACK_TRACE_STMT_INFO(234) cpptest_test_no_exception(&ThisTestSuite::test_multiply_4); CPPTEST_STACK_TRACE_STMT_INFO(235) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(236) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(237) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(238) , cpptestStrCmp(name, "test_multiply_5") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(239) cpptestTestCaseBegin(_cpptest_strdata_var(44, "test_multiply_5"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 45); CPPTEST_STACK_TRACE_STMT_INFO(240) cpptest_test_no_exception(&ThisTestSuite::test_multiply_5); CPPTEST_STACK_TRACE_STMT_INFO(241) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(242) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(243) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(244) , cpptestStrCmp(name, "test_multiply_6") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(245) cpptestTestCaseBegin(_cpptest_strdata_var(45, "test_multiply_6"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 46); CPPTEST_STACK_TRACE_STMT_INFO(246) cpptest_test_no_exception(&ThisTestSuite::test_multiply_6); CPPTEST_STACK_TRACE_STMT_INFO(247) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(248) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(249) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(250) , cpptestStrCmp(name, "test_multiply_7") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(251) cpptestTestCaseBegin(_cpptest_strdata_var(46, "test_multiply_7"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 47); CPPTEST_STACK_TRACE_STMT_INFO(252) cpptest_test_no_exception(&ThisTestSuite::test_multiply_7); CPPTEST_STACK_TRACE_STMT_INFO(253) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(254) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(255) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(256) , cpptestStrCmp(name, "test_multiply_8") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(257) cpptestTestCaseBegin(_cpptest_strdata_var(47, "test_multiply_8"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 48); CPPTEST_STACK_TRACE_STMT_INFO(258) cpptest_test_no_exception(&ThisTestSuite::test_multiply_8); CPPTEST_STACK_TRACE_STMT_INFO(259) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(260) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(261) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(262) , cpptestStrCmp(name, "test_multiply_9") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(263) cpptestTestCaseBegin(_cpptest_strdata_var(48, "test_multiply_9"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 49); CPPTEST_STACK_TRACE_STMT_INFO(264) cpptest_test_no_exception(&ThisTestSuite::test_multiply_9); CPPTEST_STACK_TRACE_STMT_INFO(265) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(266) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(267) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(268) , cpptestStrCmp(name, "test_wmain_1") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(269) cpptestTestCaseBegin(_cpptest_strdata_var(49, "test_wmain_1"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 50); CPPTEST_STACK_TRACE_STMT_INFO(270) cpptest_test_no_exception(&ThisTestSuite::test_wmain_1); CPPTEST_STACK_TRACE_STMT_INFO(271) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(272) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(273) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(274) , cpptestStrCmp(name, "test_wmain_10") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(275) cpptestTestCaseBegin(_cpptest_strdata_var(50, "test_wmain_10"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 51); CPPTEST_STACK_TRACE_STMT_INFO(276) cpptest_test_no_exception(&ThisTestSuite::test_wmain_10); CPPTEST_STACK_TRACE_STMT_INFO(277) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(278) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(279) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(280) , cpptestStrCmp(name, "test_wmain_2") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(281) cpptestTestCaseBegin(_cpptest_strdata_var(51, "test_wmain_2"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 52); CPPTEST_STACK_TRACE_STMT_INFO(282) cpptest_test_no_exception(&ThisTestSuite::test_wmain_2); CPPTEST_STACK_TRACE_STMT_INFO(283) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(284) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(285) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(286) , cpptestStrCmp(name, "test_wmain_3") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(287) cpptestTestCaseBegin(_cpptest_strdata_var(52, "test_wmain_3"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 53); CPPTEST_STACK_TRACE_STMT_INFO(288) cpptest_test_no_exception(&ThisTestSuite::test_wmain_3); CPPTEST_STACK_TRACE_STMT_INFO(289) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(290) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(291) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(292) , cpptestStrCmp(name, "test_wmain_4") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(293) cpptestTestCaseBegin(_cpptest_strdata_var(53, "test_wmain_4"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 54); CPPTEST_STACK_TRACE_STMT_INFO(294) cpptest_test_no_exception(&ThisTestSuite::test_wmain_4); CPPTEST_STACK_TRACE_STMT_INFO(295) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(296) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(297) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(298) , cpptestStrCmp(name, "test_wmain_5") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(299) cpptestTestCaseBegin(_cpptest_strdata_var(54, "test_wmain_5"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 55); CPPTEST_STACK_TRACE_STMT_INFO(300) cpptest_test_no_exception(&ThisTestSuite::test_wmain_5); CPPTEST_STACK_TRACE_STMT_INFO(301) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(302) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(303) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(304) , cpptestStrCmp(name, "test_wmain_6") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(305) cpptestTestCaseBegin(_cpptest_strdata_var(55, "test_wmain_6"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 56); CPPTEST_STACK_TRACE_STMT_INFO(306) cpptest_test_no_exception(&ThisTestSuite::test_wmain_6); CPPTEST_STACK_TRACE_STMT_INFO(307) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(308) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(309) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(310) , cpptestStrCmp(name, "test_wmain_7") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(311) cpptestTestCaseBegin(_cpptest_strdata_var(56, "test_wmain_7"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 57); CPPTEST_STACK_TRACE_STMT_INFO(312) cpptest_test_no_exception(&ThisTestSuite::test_wmain_7); CPPTEST_STACK_TRACE_STMT_INFO(313) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(314) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(315) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(316) , cpptestStrCmp(name, "test_wmain_8") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(317) cpptestTestCaseBegin(_cpptest_strdata_var(57, "test_wmain_8"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 58); CPPTEST_STACK_TRACE_STMT_INFO(318) cpptest_test_no_exception(&ThisTestSuite::test_wmain_8); CPPTEST_STACK_TRACE_STMT_INFO(319) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(320) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(321) ; 
if ((CPPTEST_STACK_TRACE_IF_COND_INFO(322) , cpptestStrCmp(name, "test_wmain_9") == 0)) { CPPTEST_STACK_TRACE_STMT_INFO(323) cpptestTestCaseBegin(_cpptest_strdata_var(58, "test_wmain_9"), 0U, 0xffffU, 1, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 59); CPPTEST_STACK_TRACE_STMT_INFO(324) cpptest_test_no_exception(&ThisTestSuite::test_wmain_9); CPPTEST_STACK_TRACE_STMT_INFO(325) cpptestTestCaseEnd(); CPPTEST_STACK_TRACE_STMT_INFO(326) return 0; }  CPPTEST_STACK_TRACE_STMT_INFO(327) ; CPPTEST_STACK_TRACE_STMT_INFO(328) 
return 1; CPPTEST_STACK_TRACE_EXIT_ROUTINE() } 

virtual void setUp(); 
virtual void tearDown(); 

void test_add_1(); 
void test_add_10(); 
void test_add_2(); 
void test_add_3(); 
void test_add_4(); 
void test_add_5(); 
void test_add_6(); 
void test_add_7(); 
void test_add_8(); 
void test_add_9(); 
void test_divide_1(); 
void test_divide_10(); 
void test_divide_2(); 
void test_divide_3(); 
void test_divide_4(); 
void test_divide_5(); 
void test_divide_6(); 
void test_divide_7(); 
void test_divide_8(); 
void test_divide_9(); 
void test_minus_1(); 
void test_minus_10(); 
void test_minus_2(); 
void test_minus_3(); 
void test_minus_4(); 
void test_minus_5(); 
void test_minus_6(); 
void test_minus_7(); 
void test_minus_8(); 
void test_minus_9(); 
void test_multiply_1(); 
void test_multiply_10(); 
void test_multiply_2(); 
void test_multiply_3(); 
void test_multiply_4(); 
void test_multiply_5(); 
void test_multiply_6(); 
void test_multiply_7(); 
void test_multiply_8(); 
void test_multiply_9(); 
void test_wmain_1(); 
void test_wmain_10(); 
void test_wmain_2(); 
void test_wmain_3(); 
void test_wmain_4(); 
void test_wmain_5(); 
void test_wmain_6(); 
void test_wmain_7(); 
void test_wmain_8(); 
void test_wmain_9(); 
}; 

void (TestSuite_Calculator_cpp_a3ed44a1::*TestSuite_Calculator_cpp_a3ed44a1::call_slave_ptr)(void); extern "C" void TestSuite_Calculator_cpp_a3ed44a1_testSuiteBegin() { CPPTEST_STACK_TRACE_FUNC_START_INFO() CPPTEST_STACK_TRACE_STMT_INFO(329) TestSuite_Calculator_cpp_a3ed44a1::testSuiteBegin(); CPPTEST_STACK_TRACE_EXIT_ROUTINE() } extern "C" int TestSuite_Calculator_cpp_a3ed44a1_callTest(const char *name) { CPPTEST_STACK_TRACE_FUNC_START_INFO() CPPTEST_STACK_TRACE_STMT_INFO(330) cpptestIgnoreCurrStackElement(); CPPTEST_STACK_TRACE_STMT_INFO(331) return TestSuite_Calculator_cpp_a3ed44a1::call(name); CPPTEST_STACK_TRACE_EXIT_ROUTINE() } ;

void TestSuite_Calculator_cpp_a3ed44a1::setUp() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 

void TestSuite_Calculator_cpp_a3ed44a1::tearDown() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 



void TestSuite_Calculator_cpp_a3ed44a1::test_add_1() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_1, 332) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_2, 333) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_3, 334) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(335) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 141); CPPTEST_STACK_TRACE_STMT_INFO(336) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_10() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_4, 337) int _x = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_5, 338) int _y = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_6, 339) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(340) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 159); CPPTEST_STACK_TRACE_STMT_INFO(341) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_2() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_7, 342) int _x = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_8, 343) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_9, 344) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(345) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 177); CPPTEST_STACK_TRACE_STMT_INFO(346) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_3() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_10, 347) int _x = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_11, 348) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_12, 349) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(350) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 195); CPPTEST_STACK_TRACE_STMT_INFO(351) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_4() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_13, 352) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_14, 353) int _y = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_15, 354) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(355) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 213); CPPTEST_STACK_TRACE_STMT_INFO(356) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_5() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_16, 357) int _x = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_17, 358) int _y = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_18, 359) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(360) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 231); CPPTEST_STACK_TRACE_STMT_INFO(361) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_6() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_19, 362) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_20, 363) int _y = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_21, 364) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(365) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 249); CPPTEST_STACK_TRACE_STMT_INFO(366) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_7() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_22, 367) int _x = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_23, 368) int _y = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_24, 369) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(370) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 267); CPPTEST_STACK_TRACE_STMT_INFO(371) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_8() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_25, 372) int _x = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_26, 373) int _y = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_27, 374) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(375) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 285); CPPTEST_STACK_TRACE_STMT_INFO(376) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_add_9() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_28, 377) int _x = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_29, 378) int _y = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_30, 379) int _return = _cpptest_TestObject.add(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(380) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 303); CPPTEST_STACK_TRACE_STMT_INFO(381) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_1() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_31, 382) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_32, 383) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_33, 384) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(385) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 321); CPPTEST_STACK_TRACE_STMT_INFO(386) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_10() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_34, 387) int _x = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_35, 388) int _y = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_36, 389) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(390) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 339); CPPTEST_STACK_TRACE_STMT_INFO(391) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_2() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_37, 392) int _x = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_38, 393) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_39, 394) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(395) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 357); CPPTEST_STACK_TRACE_STMT_INFO(396) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_3() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_40, 397) int _x = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_41, 398) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_42, 399) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(400) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 375); CPPTEST_STACK_TRACE_STMT_INFO(401) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_4() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_43, 402) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_44, 403) int _y = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_45, 404) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(405) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 393); CPPTEST_STACK_TRACE_STMT_INFO(406) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_5() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_46, 407) int _x = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_47, 408) int _y = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_48, 409) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(410) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 411); CPPTEST_STACK_TRACE_STMT_INFO(411) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_6() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_49, 412) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_50, 413) int _y = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_51, 414) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(415) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 429); CPPTEST_STACK_TRACE_STMT_INFO(416) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_7() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_52, 417) int _x = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_53, 418) int _y = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_54, 419) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(420) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 447); CPPTEST_STACK_TRACE_STMT_INFO(421) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_8() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_55, 422) int _x = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_56, 423) int _y = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_57, 424) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(425) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 465); CPPTEST_STACK_TRACE_STMT_INFO(426) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_divide_9() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_58, 427) int _x = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_59, 428) int _y = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_60, 429) int _return = _cpptest_TestObject.divide(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(430) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 483); CPPTEST_STACK_TRACE_STMT_INFO(431) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_1() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_61, 432) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_62, 433) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_63, 434) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(435) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 501); CPPTEST_STACK_TRACE_STMT_INFO(436) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_10() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_64, 437) int _x = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_65, 438) int _y = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_66, 439) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(440) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 519); CPPTEST_STACK_TRACE_STMT_INFO(441) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_2() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_67, 442) int _x = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_68, 443) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_69, 444) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(445) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 537); CPPTEST_STACK_TRACE_STMT_INFO(446) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_3() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_70, 447) int _x = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_71, 448) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_72, 449) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(450) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 555); CPPTEST_STACK_TRACE_STMT_INFO(451) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_4() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_73, 452) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_74, 453) int _y = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_75, 454) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(455) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 573); CPPTEST_STACK_TRACE_STMT_INFO(456) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_5() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_76, 457) int _x = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_77, 458) int _y = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_78, 459) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(460) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 591); CPPTEST_STACK_TRACE_STMT_INFO(461) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_6() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_79, 462) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_80, 463) int _y = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_81, 464) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(465) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 609); CPPTEST_STACK_TRACE_STMT_INFO(466) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_7() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_82, 467) int _x = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_83, 468) int _y = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_84, 469) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(470) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 627); CPPTEST_STACK_TRACE_STMT_INFO(471) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_8() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_85, 472) int _x = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_86, 473) int _y = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_87, 474) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(475) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 645); CPPTEST_STACK_TRACE_STMT_INFO(476) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_minus_9() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_88, 477) int _x = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_89, 478) int _y = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_90, 479) int _return = _cpptest_TestObject.minus(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(480) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 663); CPPTEST_STACK_TRACE_STMT_INFO(481) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_1() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_91, 482) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_92, 483) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_93, 484) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(485) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 681); CPPTEST_STACK_TRACE_STMT_INFO(486) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_10() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_94, 487) int _x = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_95, 488) int _y = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_96, 489) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(490) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 699); CPPTEST_STACK_TRACE_STMT_INFO(491) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_2() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_97, 492) int _x = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_98, 493) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_99, 494) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(495) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 717); CPPTEST_STACK_TRACE_STMT_INFO(496) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_3() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_100, 497) int _x = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_101, 498) int _y = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_102, 499) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(500) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 735); CPPTEST_STACK_TRACE_STMT_INFO(501) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_4() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_103, 502) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_104, 503) int _y = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_105, 504) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(505) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 753); CPPTEST_STACK_TRACE_STMT_INFO(506) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_5() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_106, 507) int _x = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_107, 508) int _y = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_108, 509) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(510) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 771); CPPTEST_STACK_TRACE_STMT_INFO(511) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_6() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_109, 512) int _x = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_110, 513) int _y = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_111, 514) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(515) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 789); CPPTEST_STACK_TRACE_STMT_INFO(516) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_7() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_112, 517) int _x = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_113, 518) int _y = (-1); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_114, 519) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(520) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 807); CPPTEST_STACK_TRACE_STMT_INFO(521) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_8() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_115, 522) int _x = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_116, 523) int _y = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_117, 524) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(525) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 825); CPPTEST_STACK_TRACE_STMT_INFO(526) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_multiply_9() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CalculatorProject::Calculator _cpptest_TestObject; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_118, 527) int _x = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_119, 528) int _y = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_120, 529) int _return = _cpptest_TestObject.multiply(_x, _y); CPPTEST_STACK_TRACE_STMT_INFO(530) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 843); CPPTEST_STACK_TRACE_STMT_INFO(531) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_1() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_121, 532) int _argc = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_122, 533) _TCHAR **_argv = (0); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_123, 534) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(535) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 859); CPPTEST_STACK_TRACE_STMT_INFO(536) ; CPPTEST_STACK_TRACE_STMT_INFO(537) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 860); CPPTEST_STACK_TRACE_STMT_INFO(538) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_10() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_124, 539) int _argc = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_125, 540) _TCHAR _argv_0_1 = (0U); 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_126, 541) _TCHAR *_argv_0 = &_argv_0_1; 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_127, 542) _TCHAR **_argv = &_argv_0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_128, 543) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(544) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 878); CPPTEST_STACK_TRACE_STMT_INFO(545) ; CPPTEST_STACK_TRACE_STMT_INFO(546) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 879); CPPTEST_STACK_TRACE_STMT_INFO(547) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_2() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_129, 548) int _argc = cpptestLimitsGetMaxInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_130, 549) _TCHAR **_argv = (0); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_131, 550) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(551) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 895); CPPTEST_STACK_TRACE_STMT_INFO(552) ; CPPTEST_STACK_TRACE_STMT_INFO(553) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 896); CPPTEST_STACK_TRACE_STMT_INFO(554) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_3() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_132, 555) int _argc = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_133, 556) _TCHAR **_argv = (0); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_134, 557) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(558) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 912); CPPTEST_STACK_TRACE_STMT_INFO(559) ; CPPTEST_STACK_TRACE_STMT_INFO(560) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 913); CPPTEST_STACK_TRACE_STMT_INFO(561) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_4() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_135, 562) int _argc = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_136, 563) _TCHAR *_argv_0 = (0); 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_137, 564) _TCHAR **_argv = &_argv_0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_138, 565) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(566) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 930); CPPTEST_STACK_TRACE_STMT_INFO(567) ; CPPTEST_STACK_TRACE_STMT_INFO(568) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 931); CPPTEST_STACK_TRACE_STMT_INFO(569) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_5() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_139, 570) int _argc = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_140, 571) _TCHAR _argv_0_1 = (0); 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_141, 572) _TCHAR *_argv_0 = &_argv_0_1; 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_142, 573) _TCHAR **_argv = &_argv_0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_143, 574) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(575) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 949); CPPTEST_STACK_TRACE_STMT_INFO(576) ; CPPTEST_STACK_TRACE_STMT_INFO(577) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 950); CPPTEST_STACK_TRACE_STMT_INFO(578) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_6() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_144, 579) int _argc = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_145, 580) _TCHAR _argv_0_1 = (0); 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_146, 581) _TCHAR *_argv_0 = &_argv_0_1; 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_147, 582) _TCHAR **_argv = &_argv_0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_148, 583) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(584) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 968); CPPTEST_STACK_TRACE_STMT_INFO(585) ; CPPTEST_STACK_TRACE_STMT_INFO(586) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 969); CPPTEST_STACK_TRACE_STMT_INFO(587) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_7() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_149, 588) int _argc = cpptestLimitsGetMinInt(); 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_150, 589) _TCHAR _argv_0_1 = cpptestLimitsGetMaxUnsignedShort(); 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_151, 590) _TCHAR *_argv_0 = &_argv_0_1; 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_152, 591) _TCHAR **_argv = &_argv_0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_153, 592) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(593) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 987); CPPTEST_STACK_TRACE_STMT_INFO(594) ; CPPTEST_STACK_TRACE_STMT_INFO(595) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 988); CPPTEST_STACK_TRACE_STMT_INFO(596) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_8() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_154, 597) int _argc = 0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_155, 598) _TCHAR _argv_0_1 = (1U); 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_156, 599) _TCHAR *_argv_0 = &_argv_0_1; 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_157, 600) _TCHAR **_argv = &_argv_0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_158, 601) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(602) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 1006); CPPTEST_STACK_TRACE_STMT_INFO(603) ; CPPTEST_STACK_TRACE_STMT_INFO(604) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 1007); CPPTEST_STACK_TRACE_STMT_INFO(605) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 




void TestSuite_Calculator_cpp_a3ed44a1::test_wmain_9() 
{ CPPTEST_STACK_TRACE_FUNC_START_INFO() 


CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_159, 606) int _argc = 1; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_160, 607) _TCHAR _argv_0_1 = (1U); 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_161, 608) _TCHAR *_argv_0 = &_argv_0_1; 
CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_162, 609) _TCHAR **_argv = &_argv_0; 

CPPTEST_STACK_TRACE_VARIABLE_INFO(anonymous__CPTR_163, 610) int _return = ::newMain(_argc, _argv); CPPTEST_STACK_TRACE_STMT_INFO(611) 

cpptestPostConditionInteger("int _return", (_return), _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 1025); CPPTEST_STACK_TRACE_STMT_INFO(612) ; CPPTEST_STACK_TRACE_STMT_INFO(613) 
cpptestPostConditionPtr("_TCHAR ** _argv ", ((_argv) == 0) ? 33 : 0, _cpptest_strdata_var(8, "C:\\Users\\ruiking\\Documents\\Visual Studio 2010\\Projects\\Calculator\\Calculator\\tests\\autogenerated\\\324\264\316\304\274\376" "\\TestSuite_Calculator_cpp.cpp"), 1026); CPPTEST_STACK_TRACE_STMT_INFO(614) ; CPPTEST_STACK_TRACE_EXIT_ROUTINE() 
} 
#line 1 "__TEST_HARNESS__"
;

